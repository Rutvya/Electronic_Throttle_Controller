
bin\Debug\ETC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800100  000017b6  0000186a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017b6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800174  00800174  000018de  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000018de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  000018e1  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018f4  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000118  00000000  00000000  00001930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00000d8c  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000a04  00000000  00000000  000027d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00001515  00000000  00000000  000031d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  0000029c  00000000  00000000  000046f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    000004f4  00000000  00000000  0000498c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 eb       	ldi	r30, 0xB6	; 182
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 37       	cpi	r26, 0x74	; 116
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a4 e7       	ldi	r26, 0x74	; 116
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 37       	cpi	r26, 0x78	; 120
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 02 09 	call	0x1204	; 0x1204 <main>
      9e:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:

* Arguments: None
* Returns: None
******************************************************************************/
void ADC_init()
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
    DDRC=0x00;
      ae:	87 e2       	ldi	r24, 0x27	; 39
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	fc 01       	movw	r30, r24
      b4:	10 82       	st	Z, r1
    ADMUX=0x00;
      b6:	8c e7       	ldi	r24, 0x7C	; 124
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	fc 01       	movw	r30, r24
      bc:	10 82       	st	Z, r1
    ADMUX|=(1<<REFS0);
      be:	8c e7       	ldi	r24, 0x7C	; 124
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	fc 01       	movw	r30, r24
      c4:	20 81       	ld	r18, Z
      c6:	8c e7       	ldi	r24, 0x7C	; 124
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	20 64       	ori	r18, 0x40	; 64
      cc:	fc 01       	movw	r30, r24
      ce:	20 83       	st	Z, r18
    ADCSRA=0x00;
      d0:	8a e7       	ldi	r24, 0x7A	; 122
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	fc 01       	movw	r30, r24
      d6:	10 82       	st	Z, r1
    ADCSRA|=(1<<ADEN);
      d8:	8a e7       	ldi	r24, 0x7A	; 122
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	fc 01       	movw	r30, r24
      de:	20 81       	ld	r18, Z
      e0:	8a e7       	ldi	r24, 0x7A	; 122
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	20 68       	ori	r18, 0x80	; 128
      e6:	fc 01       	movw	r30, r24
      e8:	20 83       	st	Z, r18
}
      ea:	00 00       	nop
      ec:	df 91       	pop	r29
      ee:	cf 91       	pop	r28
      f0:	08 95       	ret

000000f2 <ADC_enable>:

* Arguments: None
* Returns: None
******************************************************************************/
void ADC_enable()
{
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	cd b7       	in	r28, 0x3d	; 61
      f8:	de b7       	in	r29, 0x3e	; 62
    ADCSRA|=(1<<ADEN);
      fa:	8a e7       	ldi	r24, 0x7A	; 122
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	fc 01       	movw	r30, r24
     100:	20 81       	ld	r18, Z
     102:	8a e7       	ldi	r24, 0x7A	; 122
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	20 68       	ori	r18, 0x80	; 128
     108:	fc 01       	movw	r30, r24
     10a:	20 83       	st	Z, r18
}
     10c:	00 00       	nop
     10e:	df 91       	pop	r29
     110:	cf 91       	pop	r28
     112:	08 95       	ret

00000114 <ADC_disable>:

* Arguments: None
* Returns: None
******************************************************************************/
void ADC_disable()
{
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
    ADCSRA&=~(1<<ADEN);
     11c:	8a e7       	ldi	r24, 0x7A	; 122
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	fc 01       	movw	r30, r24
     122:	20 81       	ld	r18, Z
     124:	8a e7       	ldi	r24, 0x7A	; 122
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	2f 77       	andi	r18, 0x7F	; 127
     12a:	fc 01       	movw	r30, r24
     12c:	20 83       	st	Z, r18
}
     12e:	00 00       	nop
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	08 95       	ret

00000136 <ADC_Read>:

* Arguments: channel
* Returns: ADC value
******************************************************************************/
int ADC_Read(char channel)
{
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	cd b7       	in	r28, 0x3d	; 61
     13c:	de b7       	in	r29, 0x3e	; 62
     13e:	cd 54       	subi	r28, 0x4D	; 77
     140:	d1 09       	sbc	r29, r1
     142:	0f b6       	in	r0, 0x3f	; 63
     144:	f8 94       	cli
     146:	de bf       	out	0x3e, r29	; 62
     148:	0f be       	out	0x3f, r0	; 63
     14a:	cd bf       	out	0x3d, r28	; 61
     14c:	8d a3       	std	Y+37, r24	; 0x25
    int Ain,AinLow;
    ADMUX=0x00;
     14e:	8c e7       	ldi	r24, 0x7C	; 124
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	dc 01       	movw	r26, r24
     154:	1c 92       	st	X, r1
    ADMUX|=(1<<REFS0);
     156:	8c e7       	ldi	r24, 0x7C	; 124
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	fc 01       	movw	r30, r24
     15c:	20 81       	ld	r18, Z
     15e:	8c e7       	ldi	r24, 0x7C	; 124
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	20 64       	ori	r18, 0x40	; 64
     164:	dc 01       	movw	r26, r24
     166:	2c 93       	st	X, r18
    ADMUX=ADMUX|(channel & 0x0f);
     168:	8c e7       	ldi	r24, 0x7C	; 124
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	fc 01       	movw	r30, r24
     16e:	80 81       	ld	r24, Z
     170:	98 2f       	mov	r25, r24
     172:	8d a1       	ldd	r24, Y+37	; 0x25
     174:	8f 70       	andi	r24, 0x0F	; 15
     176:	29 2f       	mov	r18, r25
     178:	28 2b       	or	r18, r24
     17a:	8c e7       	ldi	r24, 0x7C	; 124
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	dc 01       	movw	r26, r24
     180:	2c 93       	st	X, r18
    ADCSRA |= (1<<ADSC);
     182:	8a e7       	ldi	r24, 0x7A	; 122
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	fc 01       	movw	r30, r24
     188:	20 81       	ld	r18, Z
     18a:	8a e7       	ldi	r24, 0x7A	; 122
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	20 64       	ori	r18, 0x40	; 64
     190:	dc 01       	movw	r26, r24
     192:	2c 93       	st	X, r18
    while((ADCSRA&(1<<ADSC))==0);
     194:	00 00       	nop
     196:	8a e7       	ldi	r24, 0x7A	; 122
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	fc 01       	movw	r30, r24
     19c:	80 81       	ld	r24, Z
     19e:	88 2f       	mov	r24, r24
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	80 74       	andi	r24, 0x40	; 64
     1a4:	99 27       	eor	r25, r25
     1a6:	89 2b       	or	r24, r25
     1a8:	b1 f3       	breq	.-20     	; 0x196 <ADC_Read+0x60>
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	a8 ec       	ldi	r26, 0xC8	; 200
     1b0:	b2 e4       	ldi	r27, 0x42	; 66
     1b2:	8d 83       	std	Y+5, r24	; 0x05
     1b4:	9e 83       	std	Y+6, r25	; 0x06
     1b6:	af 83       	std	Y+7, r26	; 0x07
     1b8:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     1ba:	2b ea       	ldi	r18, 0xAB	; 171
     1bc:	3a ea       	ldi	r19, 0xAA	; 170
     1be:	4a ea       	ldi	r20, 0xAA	; 170
     1c0:	50 e4       	ldi	r21, 0x40	; 64
     1c2:	6d 81       	ldd	r22, Y+5	; 0x05
     1c4:	7e 81       	ldd	r23, Y+6	; 0x06
     1c6:	8f 81       	ldd	r24, Y+7	; 0x07
     1c8:	98 85       	ldd	r25, Y+8	; 0x08
     1ca:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__mulsf3>
     1ce:	6a a7       	std	Y+42, r22	; 0x2a
     1d0:	7b a7       	std	Y+43, r23	; 0x2b
     1d2:	8c a7       	std	Y+44, r24	; 0x2c
     1d4:	9d a7       	std	Y+45, r25	; 0x2d
     1d6:	8a a5       	ldd	r24, Y+42	; 0x2a
     1d8:	9b a5       	ldd	r25, Y+43	; 0x2b
     1da:	ac a5       	ldd	r26, Y+44	; 0x2c
     1dc:	bd a5       	ldd	r27, Y+45	; 0x2d
     1de:	89 87       	std	Y+9, r24	; 0x09
     1e0:	9a 87       	std	Y+10, r25	; 0x0a
     1e2:	ab 87       	std	Y+11, r26	; 0x0b
     1e4:	bc 87       	std	Y+12, r27	; 0x0c
	__tmp2 = ((F_CPU) / 4e6) * __us;
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	40 e8       	ldi	r20, 0x80	; 128
     1ec:	50 e4       	ldi	r21, 0x40	; 64
     1ee:	6d 81       	ldd	r22, Y+5	; 0x05
     1f0:	7e 81       	ldd	r23, Y+6	; 0x06
     1f2:	8f 81       	ldd	r24, Y+7	; 0x07
     1f4:	98 85       	ldd	r25, Y+8	; 0x08
     1f6:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__mulsf3>
     1fa:	6e a7       	std	Y+46, r22	; 0x2e
     1fc:	7f a7       	std	Y+47, r23	; 0x2f
     1fe:	88 ab       	std	Y+48, r24	; 0x30
     200:	99 ab       	std	Y+49, r25	; 0x31
     202:	8e a5       	ldd	r24, Y+46	; 0x2e
     204:	9f a5       	ldd	r25, Y+47	; 0x2f
     206:	a8 a9       	ldd	r26, Y+48	; 0x30
     208:	b9 a9       	ldd	r27, Y+49	; 0x31
     20a:	8d 87       	std	Y+13, r24	; 0x0d
     20c:	9e 87       	std	Y+14, r25	; 0x0e
     20e:	af 87       	std	Y+15, r26	; 0x0f
     210:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	40 e8       	ldi	r20, 0x80	; 128
     218:	5f e3       	ldi	r21, 0x3F	; 63
     21a:	69 85       	ldd	r22, Y+9	; 0x09
     21c:	7a 85       	ldd	r23, Y+10	; 0x0a
     21e:	8b 85       	ldd	r24, Y+11	; 0x0b
     220:	9c 85       	ldd	r25, Y+12	; 0x0c
     222:	0e 94 13 0a 	call	0x1426	; 0x1426 <__cmpsf2>
     226:	88 23       	and	r24, r24
     228:	1c f4       	brge	.+6      	; 0x230 <ADC_Read+0xfa>
		__ticks = 1;
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	89 8b       	std	Y+17, r24	; 0x11
     22e:	ea c0       	rjmp	.+468    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	else if (__tmp2 > 65535)
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	3f ef       	ldi	r19, 0xFF	; 255
     234:	4f e7       	ldi	r20, 0x7F	; 127
     236:	57 e4       	ldi	r21, 0x47	; 71
     238:	6d 85       	ldd	r22, Y+13	; 0x0d
     23a:	7e 85       	ldd	r23, Y+14	; 0x0e
     23c:	8f 85       	ldd	r24, Y+15	; 0x0f
     23e:	98 89       	ldd	r25, Y+16	; 0x10
     240:	0e 94 5f 0b 	call	0x16be	; 0x16be <__gesf2>
     244:	18 16       	cp	r1, r24
     246:	0c f0       	brlt	.+2      	; 0x24a <ADC_Read+0x114>
     248:	a3 c0       	rjmp	.+326    	; 0x390 <ADC_Read+0x25a>
	{
		_delay_ms(__us / 1000.0);
     24a:	20 e0       	ldi	r18, 0x00	; 0
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	4a e7       	ldi	r20, 0x7A	; 122
     250:	54 e4       	ldi	r21, 0x44	; 68
     252:	6d 81       	ldd	r22, Y+5	; 0x05
     254:	7e 81       	ldd	r23, Y+6	; 0x06
     256:	8f 81       	ldd	r24, Y+7	; 0x07
     258:	98 85       	ldd	r25, Y+8	; 0x08
     25a:	0e 94 17 0a 	call	0x142e	; 0x142e <__divsf3>
     25e:	6a ab       	std	Y+50, r22	; 0x32
     260:	7b ab       	std	Y+51, r23	; 0x33
     262:	8c ab       	std	Y+52, r24	; 0x34
     264:	9d ab       	std	Y+53, r25	; 0x35
     266:	8a a9       	ldd	r24, Y+50	; 0x32
     268:	9b a9       	ldd	r25, Y+51	; 0x33
     26a:	ac a9       	ldd	r26, Y+52	; 0x34
     26c:	bd a9       	ldd	r27, Y+53	; 0x35
     26e:	8a 8b       	std	Y+18, r24	; 0x12
     270:	9b 8b       	std	Y+19, r25	; 0x13
     272:	ac 8b       	std	Y+20, r26	; 0x14
     274:	bd 8b       	std	Y+21, r27	; 0x15
	__tmp = ((F_CPU) / 4e3) * __ms;
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	4a e7       	ldi	r20, 0x7A	; 122
     27c:	55 e4       	ldi	r21, 0x45	; 69
     27e:	6a 89       	ldd	r22, Y+18	; 0x12
     280:	7b 89       	ldd	r23, Y+19	; 0x13
     282:	8c 89       	ldd	r24, Y+20	; 0x14
     284:	9d 89       	ldd	r25, Y+21	; 0x15
     286:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__mulsf3>
     28a:	6e ab       	std	Y+54, r22	; 0x36
     28c:	7f ab       	std	Y+55, r23	; 0x37
     28e:	88 af       	std	Y+56, r24	; 0x38
     290:	99 af       	std	Y+57, r25	; 0x39
     292:	8e a9       	ldd	r24, Y+54	; 0x36
     294:	9f a9       	ldd	r25, Y+55	; 0x37
     296:	a8 ad       	ldd	r26, Y+56	; 0x38
     298:	b9 ad       	ldd	r27, Y+57	; 0x39
     29a:	8e 8b       	std	Y+22, r24	; 0x16
     29c:	9f 8b       	std	Y+23, r25	; 0x17
     29e:	a8 8f       	std	Y+24, r26	; 0x18
     2a0:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
     2a2:	20 e0       	ldi	r18, 0x00	; 0
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	40 e8       	ldi	r20, 0x80	; 128
     2a8:	5f e3       	ldi	r21, 0x3F	; 63
     2aa:	6e 89       	ldd	r22, Y+22	; 0x16
     2ac:	7f 89       	ldd	r23, Y+23	; 0x17
     2ae:	88 8d       	ldd	r24, Y+24	; 0x18
     2b0:	99 8d       	ldd	r25, Y+25	; 0x19
     2b2:	0e 94 13 0a 	call	0x1426	; 0x1426 <__cmpsf2>
     2b6:	88 23       	and	r24, r24
     2b8:	2c f4       	brge	.+10     	; 0x2c4 <ADC_Read+0x18e>
		__ticks = 1;
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	9b 8f       	std	Y+27, r25	; 0x1b
     2c0:	8a 8f       	std	Y+26, r24	; 0x1a
     2c2:	5b c0       	rjmp	.+182    	; 0x37a <ADC_Read+0x244>
	else if (__tmp > 65535)
     2c4:	20 e0       	ldi	r18, 0x00	; 0
     2c6:	3f ef       	ldi	r19, 0xFF	; 255
     2c8:	4f e7       	ldi	r20, 0x7F	; 127
     2ca:	57 e4       	ldi	r21, 0x47	; 71
     2cc:	6e 89       	ldd	r22, Y+22	; 0x16
     2ce:	7f 89       	ldd	r23, Y+23	; 0x17
     2d0:	88 8d       	ldd	r24, Y+24	; 0x18
     2d2:	99 8d       	ldd	r25, Y+25	; 0x19
     2d4:	0e 94 5f 0b 	call	0x16be	; 0x16be <__gesf2>
     2d8:	18 16       	cp	r1, r24
     2da:	0c f0       	brlt	.+2      	; 0x2de <ADC_Read+0x1a8>
     2dc:	3c c0       	rjmp	.+120    	; 0x356 <ADC_Read+0x220>
		__ticks = (uint16_t) (__ms * 10.0);
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	40 e2       	ldi	r20, 0x20	; 32
     2e4:	51 e4       	ldi	r21, 0x41	; 65
     2e6:	6a 89       	ldd	r22, Y+18	; 0x12
     2e8:	7b 89       	ldd	r23, Y+19	; 0x13
     2ea:	8c 89       	ldd	r24, Y+20	; 0x14
     2ec:	9d 89       	ldd	r25, Y+21	; 0x15
     2ee:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__mulsf3>
     2f2:	6a af       	std	Y+58, r22	; 0x3a
     2f4:	7b af       	std	Y+59, r23	; 0x3b
     2f6:	8c af       	std	Y+60, r24	; 0x3c
     2f8:	9d af       	std	Y+61, r25	; 0x3d
     2fa:	8a ad       	ldd	r24, Y+58	; 0x3a
     2fc:	9b ad       	ldd	r25, Y+59	; 0x3b
     2fe:	ac ad       	ldd	r26, Y+60	; 0x3c
     300:	bd ad       	ldd	r27, Y+61	; 0x3d
     302:	8e a3       	std	Y+38, r24	; 0x26
     304:	9f a3       	std	Y+39, r25	; 0x27
     306:	a8 a7       	std	Y+40, r26	; 0x28
     308:	b9 a7       	std	Y+41, r27	; 0x29
     30a:	6e a1       	ldd	r22, Y+38	; 0x26
     30c:	7f a1       	ldd	r23, Y+39	; 0x27
     30e:	88 a5       	ldd	r24, Y+40	; 0x28
     310:	99 a5       	ldd	r25, Y+41	; 0x29
     312:	0e 94 80 0a 	call	0x1500	; 0x1500 <__fixunssfsi>
     316:	22 96       	adiw	r28, 0x02	; 2
     318:	6c af       	std	Y+60, r22	; 0x3c
     31a:	7d af       	std	Y+61, r23	; 0x3d
     31c:	8e af       	std	Y+62, r24	; 0x3e
     31e:	9f af       	std	Y+63, r25	; 0x3f
     320:	22 97       	sbiw	r28, 0x02	; 2
     322:	ae ad       	ldd	r26, Y+62	; 0x3e
     324:	bf ad       	ldd	r27, Y+63	; 0x3f
     326:	bb 8f       	std	Y+27, r27	; 0x1b
     328:	aa 8f       	std	Y+26, r26	; 0x1a
		while(__ticks)
     32a:	10 c0       	rjmp	.+32     	; 0x34c <ADC_Read+0x216>
     32c:	80 e9       	ldi	r24, 0x90	; 144
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	9d 8f       	std	Y+29, r25	; 0x1d
     332:	8c 8f       	std	Y+28, r24	; 0x1c
		"sbc %B0,__zero_reg__"    "\n\t"
		"brne 1b"
		: "+d" (__count)
	);
#else
	__asm__ volatile (
     334:	8c 8d       	ldd	r24, Y+28	; 0x1c
     336:	9d 8d       	ldd	r25, Y+29	; 0x1d
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <ADC_Read+0x202>
     33c:	9d 8f       	std	Y+29, r25	; 0x1d
     33e:	8c 8f       	std	Y+28, r24	; 0x1c
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
#endif /* __AVR_TINY__ */
}
     340:	00 00       	nop
			__ticks --;
     342:	8a 8d       	ldd	r24, Y+26	; 0x1a
     344:	9b 8d       	ldd	r25, Y+27	; 0x1b
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	9b 8f       	std	Y+27, r25	; 0x1b
     34a:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
     34c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     34e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     350:	89 2b       	or	r24, r25
     352:	61 f7       	brne	.-40     	; 0x32c <ADC_Read+0x1f6>
		return;
     354:	57 c0       	rjmp	.+174    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		__ticks = (uint16_t)__tmp;
     356:	6e 89       	ldd	r22, Y+22	; 0x16
     358:	7f 89       	ldd	r23, Y+23	; 0x17
     35a:	88 8d       	ldd	r24, Y+24	; 0x18
     35c:	99 8d       	ldd	r25, Y+25	; 0x19
     35e:	0e 94 80 0a 	call	0x1500	; 0x1500 <__fixunssfsi>
     362:	26 96       	adiw	r28, 0x06	; 6
     364:	6c af       	std	Y+60, r22	; 0x3c
     366:	7d af       	std	Y+61, r23	; 0x3d
     368:	8e af       	std	Y+62, r24	; 0x3e
     36a:	9f af       	std	Y+63, r25	; 0x3f
     36c:	26 97       	sbiw	r28, 0x06	; 6
     36e:	24 96       	adiw	r28, 0x04	; 4
     370:	ee ad       	ldd	r30, Y+62	; 0x3e
     372:	ff ad       	ldd	r31, Y+63	; 0x3f
     374:	24 97       	sbiw	r28, 0x04	; 4
     376:	fb 8f       	std	Y+27, r31	; 0x1b
     378:	ea 8f       	std	Y+26, r30	; 0x1a
     37a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     37c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     37e:	9f 8f       	std	Y+31, r25	; 0x1f
     380:	8e 8f       	std	Y+30, r24	; 0x1e
	__asm__ volatile (
     382:	8e 8d       	ldd	r24, Y+30	; 0x1e
     384:	9f 8d       	ldd	r25, Y+31	; 0x1f
     386:	01 97       	sbiw	r24, 0x01	; 1
     388:	f1 f7       	brne	.-4      	; 0x386 <ADC_Read+0x250>
     38a:	9f 8f       	std	Y+31, r25	; 0x1f
     38c:	8e 8f       	std	Y+30, r24	; 0x1e
}
     38e:	3a c0       	rjmp	.+116    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	}
	else if (__tmp > 255)
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	4f e7       	ldi	r20, 0x7F	; 127
     396:	53 e4       	ldi	r21, 0x43	; 67
     398:	69 85       	ldd	r22, Y+9	; 0x09
     39a:	7a 85       	ldd	r23, Y+10	; 0x0a
     39c:	8b 85       	ldd	r24, Y+11	; 0x0b
     39e:	9c 85       	ldd	r25, Y+12	; 0x0c
     3a0:	0e 94 5f 0b 	call	0x16be	; 0x16be <__gesf2>
     3a4:	18 16       	cp	r1, r24
     3a6:	f4 f4       	brge	.+60     	; 0x3e4 <ADC_Read+0x2ae>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     3a8:	6d 85       	ldd	r22, Y+13	; 0x0d
     3aa:	7e 85       	ldd	r23, Y+14	; 0x0e
     3ac:	8f 85       	ldd	r24, Y+15	; 0x0f
     3ae:	98 89       	ldd	r25, Y+16	; 0x10
     3b0:	0e 94 80 0a 	call	0x1500	; 0x1500 <__fixunssfsi>
     3b4:	2a 96       	adiw	r28, 0x0a	; 10
     3b6:	6c af       	std	Y+60, r22	; 0x3c
     3b8:	7d af       	std	Y+61, r23	; 0x3d
     3ba:	8e af       	std	Y+62, r24	; 0x3e
     3bc:	9f af       	std	Y+63, r25	; 0x3f
     3be:	2a 97       	sbiw	r28, 0x0a	; 10
     3c0:	28 96       	adiw	r28, 0x08	; 8
     3c2:	8e ad       	ldd	r24, Y+62	; 0x3e
     3c4:	9f ad       	ldd	r25, Y+63	; 0x3f
     3c6:	28 97       	sbiw	r28, 0x08	; 8
     3c8:	99 a3       	std	Y+33, r25	; 0x21
     3ca:	88 a3       	std	Y+32, r24	; 0x20
     3cc:	88 a1       	ldd	r24, Y+32	; 0x20
     3ce:	99 a1       	ldd	r25, Y+33	; 0x21
     3d0:	9b a3       	std	Y+35, r25	; 0x23
     3d2:	8a a3       	std	Y+34, r24	; 0x22
	__asm__ volatile (
     3d4:	8a a1       	ldd	r24, Y+34	; 0x22
     3d6:	9b a1       	ldd	r25, Y+35	; 0x23
     3d8:	01 97       	sbiw	r24, 0x01	; 1
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <ADC_Read+0x2a2>
     3dc:	9b a3       	std	Y+35, r25	; 0x23
     3de:	8a a3       	std	Y+34, r24	; 0x22
}
     3e0:	00 00       	nop
		_delay_loop_2(__ticks);
		return;
     3e2:	17 c0       	rjmp	.+46     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	}
	else
		__ticks = (uint8_t)__tmp;
     3e4:	69 85       	ldd	r22, Y+9	; 0x09
     3e6:	7a 85       	ldd	r23, Y+10	; 0x0a
     3e8:	8b 85       	ldd	r24, Y+11	; 0x0b
     3ea:	9c 85       	ldd	r25, Y+12	; 0x0c
     3ec:	0e 94 80 0a 	call	0x1500	; 0x1500 <__fixunssfsi>
     3f0:	2e 96       	adiw	r28, 0x0e	; 14
     3f2:	6c af       	std	Y+60, r22	; 0x3c
     3f4:	7d af       	std	Y+61, r23	; 0x3d
     3f6:	8e af       	std	Y+62, r24	; 0x3e
     3f8:	9f af       	std	Y+63, r25	; 0x3f
     3fa:	2e 97       	sbiw	r28, 0x0e	; 14
     3fc:	2b 96       	adiw	r28, 0x0b	; 11
     3fe:	9f ad       	ldd	r25, Y+63	; 0x3f
     400:	2b 97       	sbiw	r28, 0x0b	; 11
     402:	99 8b       	std	Y+17, r25	; 0x11
     404:	89 89       	ldd	r24, Y+17	; 0x11
     406:	8c a3       	std	Y+36, r24	; 0x24
	__asm__ volatile (
     408:	8c a1       	ldd	r24, Y+36	; 0x24
     40a:	8a 95       	dec	r24
     40c:	f1 f7       	brne	.-4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     40e:	8c a3       	std	Y+36, r24	; 0x24
}
     410:	00 00       	nop
    _delay_us(100);
    AinLow = (int)ADCL;
     412:	88 e7       	ldi	r24, 0x78	; 120
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	dc 01       	movw	r26, r24
     418:	8c 91       	ld	r24, X
     41a:	88 2f       	mov	r24, r24
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	9a 83       	std	Y+2, r25	; 0x02
     420:	89 83       	std	Y+1, r24	; 0x01
    Ain = (int)ADCH*256;
     422:	89 e7       	ldi	r24, 0x79	; 121
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	fc 01       	movw	r30, r24
     428:	80 81       	ld	r24, Z
     42a:	88 2f       	mov	r24, r24
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	98 2f       	mov	r25, r24
     430:	88 27       	eor	r24, r24
     432:	9c 83       	std	Y+4, r25	; 0x04
     434:	8b 83       	std	Y+3, r24	; 0x03
    Ain = Ain + AinLow;
     436:	2b 81       	ldd	r18, Y+3	; 0x03
     438:	3c 81       	ldd	r19, Y+4	; 0x04
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	9a 81       	ldd	r25, Y+2	; 0x02
     43e:	82 0f       	add	r24, r18
     440:	93 1f       	adc	r25, r19
     442:	9c 83       	std	Y+4, r25	; 0x04
     444:	8b 83       	std	Y+3, r24	; 0x03
    return Ain;
     446:	8b 81       	ldd	r24, Y+3	; 0x03
     448:	9c 81       	ldd	r25, Y+4	; 0x04
}
     44a:	c3 5b       	subi	r28, 0xB3	; 179
     44c:	df 4f       	sbci	r29, 0xFF	; 255
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	f8 94       	cli
     452:	de bf       	out	0x3e, r29	; 62
     454:	0f be       	out	0x3f, r0	; 63
     456:	cd bf       	out	0x3d, r28	; 61
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <ETC_init>:

* Arguments: None
* Returns: None
******************************************************************************/
void ETC_init()
{
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
    cli();
     466:	f8 94       	cli
    GPIOConfig("PD6",OUTPUT);
     468:	61 e0       	ldi	r22, 0x01	; 1
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	0e 94 92 03 	call	0x724	; 0x724 <GPIOConfig>
    GPIOConfig("PB1",OUTPUT);
     472:	61 e0       	ldi	r22, 0x01	; 1
     474:	84 e0       	ldi	r24, 0x04	; 4
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	0e 94 92 03 	call	0x724	; 0x724 <GPIOConfig>
    GPIOConfig("PD0",INPUT);
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	88 e0       	ldi	r24, 0x08	; 8
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	0e 94 92 03 	call	0x724	; 0x724 <GPIOConfig>
    GPIOConfig("PD2",INPUT);
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	8c e0       	ldi	r24, 0x0C	; 12
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	0e 94 92 03 	call	0x724	; 0x724 <GPIOConfig>
    GPIOConfig("PD3",INPUT);
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	80 e1       	ldi	r24, 0x10	; 16
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	0e 94 92 03 	call	0x724	; 0x724 <GPIOConfig>
    GPIOConfig("PD4",INPUT);
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	84 e1       	ldi	r24, 0x14	; 20
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	0e 94 92 03 	call	0x724	; 0x724 <GPIOConfig>
    GPIOPinWrite("PB1",LOW);
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	84 e0       	ldi	r24, 0x04	; 4
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <GPIOPinWrite>
    PWM_init();
     4ae:	0e 94 4e 09 	call	0x129c	; 0x129c <PWM_init>
    DDRC=0x00;
     4b2:	87 e2       	ldi	r24, 0x27	; 39
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	fc 01       	movw	r30, r24
     4b8:	10 82       	st	Z, r1
    PWM_enable();
     4ba:	0e 94 8f 09 	call	0x131e	; 0x131e <PWM_enable>
    ADC_init();
     4be:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
    ADC_enable();
     4c2:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_enable>
}
     4c6:	00 00       	nop
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	08 95       	ret

000004ce <ETC_off>:

* Arguments: None
* Returns: None
******************************************************************************/
void ETC_off()
{
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
    ADC_disable();
     4d6:	0e 94 8a 00 	call	0x114	; 0x114 <ADC_disable>
    PWM_disable();
     4da:	0e 94 75 09 	call	0x12ea	; 0x12ea <PWM_disable>
    GPIOPinWrite("PB1",LOW);
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	84 e0       	ldi	r24, 0x04	; 4
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <GPIOPinWrite>
    OCR0A=0;
     4e8:	87 e4       	ldi	r24, 0x47	; 71
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	fc 01       	movw	r30, r24
     4ee:	10 82       	st	Z, r1
}
     4f0:	00 00       	nop
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <ETC_Limp>:

* Arguments: None
* Returns: None
******************************************************************************/
void ETC_Limp()
{
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
    PWM_enable();
     500:	0e 94 8f 09 	call	0x131e	; 0x131e <PWM_enable>
    GPIOPinWrite("PB1",HIGH);
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	84 e0       	ldi	r24, 0x04	; 4
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <GPIOPinWrite>
    OCR0A=25;
     50e:	87 e4       	ldi	r24, 0x47	; 71
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	29 e1       	ldi	r18, 0x19	; 25
     514:	fc 01       	movw	r30, r24
     516:	20 83       	st	Z, r18
}
     518:	00 00       	nop
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	08 95       	ret

00000520 <ETC_APS1>:

* Arguments: None
* Returns: None
******************************************************************************/
void ETC_APS1()
{
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	6c 97       	sbiw	r28, 0x1c	; 28
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	f8 94       	cli
     532:	de bf       	out	0x3e, r29	; 62
     534:	0f be       	out	0x3f, r0	; 63
     536:	cd bf       	out	0x3d, r28	; 61
    ADC_enable();
     538:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_enable>
    PWM_enable();
     53c:	0e 94 8f 09 	call	0x131e	; 0x131e <PWM_enable>
    GPIOPinWrite("PB1",LOW);
     540:	60 e0       	ldi	r22, 0x00	; 0
     542:	84 e0       	ldi	r24, 0x04	; 4
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <GPIOPinWrite>
    OCR0A=25+(ADC_Read(0)/4.6);
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	0e 94 9b 00 	call	0x136	; 0x136 <ADC_Read>
     550:	9c 01       	movw	r18, r24
     552:	99 0f       	add	r25, r25
     554:	44 0b       	sbc	r20, r20
     556:	55 0b       	sbc	r21, r21
     558:	2d 87       	std	Y+13, r18	; 0x0d
     55a:	3e 87       	std	Y+14, r19	; 0x0e
     55c:	4f 87       	std	Y+15, r20	; 0x0f
     55e:	58 8b       	std	Y+16, r21	; 0x10
     560:	6d 85       	ldd	r22, Y+13	; 0x0d
     562:	7e 85       	ldd	r23, Y+14	; 0x0e
     564:	8f 85       	ldd	r24, Y+15	; 0x0f
     566:	98 89       	ldd	r25, Y+16	; 0x10
     568:	0e 94 ae 0a 	call	0x155c	; 0x155c <__floatsisf>
     56c:	69 83       	std	Y+1, r22	; 0x01
     56e:	7a 83       	std	Y+2, r23	; 0x02
     570:	8b 83       	std	Y+3, r24	; 0x03
     572:	9c 83       	std	Y+4, r25	; 0x04
     574:	23 e3       	ldi	r18, 0x33	; 51
     576:	33 e3       	ldi	r19, 0x33	; 51
     578:	43 e9       	ldi	r20, 0x93	; 147
     57a:	50 e4       	ldi	r21, 0x40	; 64
     57c:	69 81       	ldd	r22, Y+1	; 0x01
     57e:	7a 81       	ldd	r23, Y+2	; 0x02
     580:	8b 81       	ldd	r24, Y+3	; 0x03
     582:	9c 81       	ldd	r25, Y+4	; 0x04
     584:	0e 94 17 0a 	call	0x142e	; 0x142e <__divsf3>
     588:	69 8b       	std	Y+17, r22	; 0x11
     58a:	7a 8b       	std	Y+18, r23	; 0x12
     58c:	8b 8b       	std	Y+19, r24	; 0x13
     58e:	9c 8b       	std	Y+20, r25	; 0x14
     590:	89 89       	ldd	r24, Y+17	; 0x11
     592:	9a 89       	ldd	r25, Y+18	; 0x12
     594:	ab 89       	ldd	r26, Y+19	; 0x13
     596:	bc 89       	ldd	r27, Y+20	; 0x14
     598:	8d 83       	std	Y+5, r24	; 0x05
     59a:	9e 83       	std	Y+6, r25	; 0x06
     59c:	af 83       	std	Y+7, r26	; 0x07
     59e:	b8 87       	std	Y+8, r27	; 0x08
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	48 ec       	ldi	r20, 0xC8	; 200
     5a6:	51 e4       	ldi	r21, 0x41	; 65
     5a8:	6d 81       	ldd	r22, Y+5	; 0x05
     5aa:	7e 81       	ldd	r23, Y+6	; 0x06
     5ac:	8f 81       	ldd	r24, Y+7	; 0x07
     5ae:	98 85       	ldd	r25, Y+8	; 0x08
     5b0:	0e 94 aa 09 	call	0x1354	; 0x1354 <__addsf3>
     5b4:	6d 8b       	std	Y+21, r22	; 0x15
     5b6:	7e 8b       	std	Y+22, r23	; 0x16
     5b8:	8f 8b       	std	Y+23, r24	; 0x17
     5ba:	98 8f       	std	Y+24, r25	; 0x18
     5bc:	2d 89       	ldd	r18, Y+21	; 0x15
     5be:	3e 89       	ldd	r19, Y+22	; 0x16
     5c0:	4f 89       	ldd	r20, Y+23	; 0x17
     5c2:	58 8d       	ldd	r21, Y+24	; 0x18
     5c4:	29 87       	std	Y+9, r18	; 0x09
     5c6:	3a 87       	std	Y+10, r19	; 0x0a
     5c8:	4b 87       	std	Y+11, r20	; 0x0b
     5ca:	5c 87       	std	Y+12, r21	; 0x0c
     5cc:	07 e4       	ldi	r16, 0x47	; 71
     5ce:	10 e0       	ldi	r17, 0x00	; 0
     5d0:	69 85       	ldd	r22, Y+9	; 0x09
     5d2:	7a 85       	ldd	r23, Y+10	; 0x0a
     5d4:	8b 85       	ldd	r24, Y+11	; 0x0b
     5d6:	9c 85       	ldd	r25, Y+12	; 0x0c
     5d8:	0e 94 80 0a 	call	0x1500	; 0x1500 <__fixunssfsi>
     5dc:	69 8f       	std	Y+25, r22	; 0x19
     5de:	7a 8f       	std	Y+26, r23	; 0x1a
     5e0:	8b 8f       	std	Y+27, r24	; 0x1b
     5e2:	9c 8f       	std	Y+28, r25	; 0x1c
     5e4:	89 8d       	ldd	r24, Y+25	; 0x19
     5e6:	d8 01       	movw	r26, r16
     5e8:	8c 93       	st	X, r24
}
     5ea:	00 00       	nop
     5ec:	6c 96       	adiw	r28, 0x1c	; 28
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	cd bf       	out	0x3d, r28	; 61
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	08 95       	ret

00000602 <ETC_APS2>:

* Arguments: None
* Returns: None
******************************************************************************/
void ETC_APS2()
{
     602:	0f 93       	push	r16
     604:	1f 93       	push	r17
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
     60e:	6c 97       	sbiw	r28, 0x1c	; 28
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
    ADC_enable();
     61a:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_enable>
    PWM_enable();
     61e:	0e 94 8f 09 	call	0x131e	; 0x131e <PWM_enable>
    GPIOPinWrite("PB1",LOW);
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	84 e0       	ldi	r24, 0x04	; 4
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <GPIOPinWrite>
    OCR0A=25+(ADC_Read(1)/4.6);
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	0e 94 9b 00 	call	0x136	; 0x136 <ADC_Read>
     632:	9c 01       	movw	r18, r24
     634:	99 0f       	add	r25, r25
     636:	44 0b       	sbc	r20, r20
     638:	55 0b       	sbc	r21, r21
     63a:	2d 87       	std	Y+13, r18	; 0x0d
     63c:	3e 87       	std	Y+14, r19	; 0x0e
     63e:	4f 87       	std	Y+15, r20	; 0x0f
     640:	58 8b       	std	Y+16, r21	; 0x10
     642:	6d 85       	ldd	r22, Y+13	; 0x0d
     644:	7e 85       	ldd	r23, Y+14	; 0x0e
     646:	8f 85       	ldd	r24, Y+15	; 0x0f
     648:	98 89       	ldd	r25, Y+16	; 0x10
     64a:	0e 94 ae 0a 	call	0x155c	; 0x155c <__floatsisf>
     64e:	69 83       	std	Y+1, r22	; 0x01
     650:	7a 83       	std	Y+2, r23	; 0x02
     652:	8b 83       	std	Y+3, r24	; 0x03
     654:	9c 83       	std	Y+4, r25	; 0x04
     656:	23 e3       	ldi	r18, 0x33	; 51
     658:	33 e3       	ldi	r19, 0x33	; 51
     65a:	43 e9       	ldi	r20, 0x93	; 147
     65c:	50 e4       	ldi	r21, 0x40	; 64
     65e:	69 81       	ldd	r22, Y+1	; 0x01
     660:	7a 81       	ldd	r23, Y+2	; 0x02
     662:	8b 81       	ldd	r24, Y+3	; 0x03
     664:	9c 81       	ldd	r25, Y+4	; 0x04
     666:	0e 94 17 0a 	call	0x142e	; 0x142e <__divsf3>
     66a:	69 8b       	std	Y+17, r22	; 0x11
     66c:	7a 8b       	std	Y+18, r23	; 0x12
     66e:	8b 8b       	std	Y+19, r24	; 0x13
     670:	9c 8b       	std	Y+20, r25	; 0x14
     672:	89 89       	ldd	r24, Y+17	; 0x11
     674:	9a 89       	ldd	r25, Y+18	; 0x12
     676:	ab 89       	ldd	r26, Y+19	; 0x13
     678:	bc 89       	ldd	r27, Y+20	; 0x14
     67a:	8d 83       	std	Y+5, r24	; 0x05
     67c:	9e 83       	std	Y+6, r25	; 0x06
     67e:	af 83       	std	Y+7, r26	; 0x07
     680:	b8 87       	std	Y+8, r27	; 0x08
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	48 ec       	ldi	r20, 0xC8	; 200
     688:	51 e4       	ldi	r21, 0x41	; 65
     68a:	6d 81       	ldd	r22, Y+5	; 0x05
     68c:	7e 81       	ldd	r23, Y+6	; 0x06
     68e:	8f 81       	ldd	r24, Y+7	; 0x07
     690:	98 85       	ldd	r25, Y+8	; 0x08
     692:	0e 94 aa 09 	call	0x1354	; 0x1354 <__addsf3>
     696:	6d 8b       	std	Y+21, r22	; 0x15
     698:	7e 8b       	std	Y+22, r23	; 0x16
     69a:	8f 8b       	std	Y+23, r24	; 0x17
     69c:	98 8f       	std	Y+24, r25	; 0x18
     69e:	2d 89       	ldd	r18, Y+21	; 0x15
     6a0:	3e 89       	ldd	r19, Y+22	; 0x16
     6a2:	4f 89       	ldd	r20, Y+23	; 0x17
     6a4:	58 8d       	ldd	r21, Y+24	; 0x18
     6a6:	29 87       	std	Y+9, r18	; 0x09
     6a8:	3a 87       	std	Y+10, r19	; 0x0a
     6aa:	4b 87       	std	Y+11, r20	; 0x0b
     6ac:	5c 87       	std	Y+12, r21	; 0x0c
     6ae:	07 e4       	ldi	r16, 0x47	; 71
     6b0:	10 e0       	ldi	r17, 0x00	; 0
     6b2:	69 85       	ldd	r22, Y+9	; 0x09
     6b4:	7a 85       	ldd	r23, Y+10	; 0x0a
     6b6:	8b 85       	ldd	r24, Y+11	; 0x0b
     6b8:	9c 85       	ldd	r25, Y+12	; 0x0c
     6ba:	0e 94 80 0a 	call	0x1500	; 0x1500 <__fixunssfsi>
     6be:	69 8f       	std	Y+25, r22	; 0x19
     6c0:	7a 8f       	std	Y+26, r23	; 0x1a
     6c2:	8b 8f       	std	Y+27, r24	; 0x1b
     6c4:	9c 8f       	std	Y+28, r25	; 0x1c
     6c6:	89 8d       	ldd	r24, Y+25	; 0x19
     6c8:	d8 01       	movw	r26, r16
     6ca:	8c 93       	st	X, r24
}
     6cc:	00 00       	nop
     6ce:	6c 96       	adiw	r28, 0x1c	; 28
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	08 95       	ret

000006e4 <Read_FLAGS>:

* Arguments: None
* Returns: None
******************************************************************************/
void Read_FLAGS()
{
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
    FLAG.engineStatus=GPIOPinRead("PD0");
     6ec:	88 e0       	ldi	r24, 0x08	; 8
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 ef 07 	call	0xfde	; 0xfde <GPIOPinRead>
     6f4:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <FLAG+0x3>
    FLAG.APS1_fail=GPIOPinRead("PD2");
     6f8:	8c e0       	ldi	r24, 0x0C	; 12
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	0e 94 ef 07 	call	0xfde	; 0xfde <GPIOPinRead>
     700:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <FLAG>
    FLAG.APS2_fail=GPIOPinRead("PD3");
     704:	80 e1       	ldi	r24, 0x10	; 16
     706:	91 e0       	ldi	r25, 0x01	; 1
     708:	0e 94 ef 07 	call	0xfde	; 0xfde <GPIOPinRead>
     70c:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <FLAG+0x1>
    FLAG.TPS_fail=GPIOPinRead("PD4");
     710:	84 e1       	ldi	r24, 0x14	; 20
     712:	91 e0       	ldi	r25, 0x01	; 1
     714:	0e 94 ef 07 	call	0xfde	; 0xfde <GPIOPinRead>
     718:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <FLAG+0x2>
}
     71c:	00 00       	nop
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	08 95       	ret

00000724 <GPIOConfig>:

* Arguments: pin and mode
* Returns: None
******************************************************************************/
void GPIOConfig(const char pin[3],uint8_t mode)
{
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	00 d0       	rcall	.+0      	; 0x72a <GPIOConfig+0x6>
     72a:	00 d0       	rcall	.+0      	; 0x72c <GPIOConfig+0x8>
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	9b 83       	std	Y+3, r25	; 0x03
     732:	8a 83       	std	Y+2, r24	; 0x02
     734:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t bit;
    bit=pin[2]-'0';
     736:	8a 81       	ldd	r24, Y+2	; 0x02
     738:	9b 81       	ldd	r25, Y+3	; 0x03
     73a:	02 96       	adiw	r24, 0x02	; 2
     73c:	fc 01       	movw	r30, r24
     73e:	80 81       	ld	r24, Z
     740:	80 53       	subi	r24, 0x30	; 48
     742:	89 83       	std	Y+1, r24	; 0x01
    if(mode==OUTPUT)
     744:	8c 81       	ldd	r24, Y+4	; 0x04
     746:	81 30       	cpi	r24, 0x01	; 1
     748:	09 f0       	breq	.+2      	; 0x74c <GPIOConfig+0x28>
     74a:	f9 c0       	rjmp	.+498    	; 0x93e <__stack+0x3f>
    {
        if(!strcmp(pin,"PC6")||!strcmp(pin,"PC5")||!strcmp(pin,"PC4")||!strcmp(pin,"PC3")||
     74c:	8a 81       	ldd	r24, Y+2	; 0x02
     74e:	9b 81       	ldd	r25, Y+3	; 0x03
     750:	68 e1       	ldi	r22, 0x18	; 24
     752:	71 e0       	ldi	r23, 0x01	; 1
     754:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     758:	89 2b       	or	r24, r25
     75a:	81 f1       	breq	.+96     	; 0x7bc <GPIOConfig+0x98>
     75c:	8a 81       	ldd	r24, Y+2	; 0x02
     75e:	9b 81       	ldd	r25, Y+3	; 0x03
     760:	6c e1       	ldi	r22, 0x1C	; 28
     762:	71 e0       	ldi	r23, 0x01	; 1
     764:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     768:	89 2b       	or	r24, r25
     76a:	41 f1       	breq	.+80     	; 0x7bc <GPIOConfig+0x98>
     76c:	8a 81       	ldd	r24, Y+2	; 0x02
     76e:	9b 81       	ldd	r25, Y+3	; 0x03
     770:	60 e2       	ldi	r22, 0x20	; 32
     772:	71 e0       	ldi	r23, 0x01	; 1
     774:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     778:	89 2b       	or	r24, r25
     77a:	01 f1       	breq	.+64     	; 0x7bc <GPIOConfig+0x98>
     77c:	8a 81       	ldd	r24, Y+2	; 0x02
     77e:	9b 81       	ldd	r25, Y+3	; 0x03
     780:	64 e2       	ldi	r22, 0x24	; 36
     782:	71 e0       	ldi	r23, 0x01	; 1
     784:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     788:	89 2b       	or	r24, r25
     78a:	c1 f0       	breq	.+48     	; 0x7bc <GPIOConfig+0x98>
           !strcmp(pin,"PC2")||!strcmp(pin,"PC1")||!strcmp(pin,"PC0"))
     78c:	8a 81       	ldd	r24, Y+2	; 0x02
     78e:	9b 81       	ldd	r25, Y+3	; 0x03
     790:	68 e2       	ldi	r22, 0x28	; 40
     792:	71 e0       	ldi	r23, 0x01	; 1
     794:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
        if(!strcmp(pin,"PC6")||!strcmp(pin,"PC5")||!strcmp(pin,"PC4")||!strcmp(pin,"PC3")||
     798:	89 2b       	or	r24, r25
     79a:	81 f0       	breq	.+32     	; 0x7bc <GPIOConfig+0x98>
           !strcmp(pin,"PC2")||!strcmp(pin,"PC1")||!strcmp(pin,"PC0"))
     79c:	8a 81       	ldd	r24, Y+2	; 0x02
     79e:	9b 81       	ldd	r25, Y+3	; 0x03
     7a0:	6c e2       	ldi	r22, 0x2C	; 44
     7a2:	71 e0       	ldi	r23, 0x01	; 1
     7a4:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     7a8:	89 2b       	or	r24, r25
     7aa:	41 f0       	breq	.+16     	; 0x7bc <GPIOConfig+0x98>
     7ac:	8a 81       	ldd	r24, Y+2	; 0x02
     7ae:	9b 81       	ldd	r25, Y+3	; 0x03
     7b0:	60 e3       	ldi	r22, 0x30	; 48
     7b2:	71 e0       	ldi	r23, 0x01	; 1
     7b4:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     7b8:	89 2b       	or	r24, r25
     7ba:	a9 f4       	brne	.+42     	; 0x7e6 <GPIOConfig+0xc2>
        {
            SET_BIT(DDRC,bit);
     7bc:	87 e2       	ldi	r24, 0x27	; 39
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	fc 01       	movw	r30, r24
     7c2:	80 81       	ld	r24, Z
     7c4:	48 2f       	mov	r20, r24
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	28 2f       	mov	r18, r24
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <GPIOConfig+0xb2>
     7d2:	88 0f       	add	r24, r24
     7d4:	99 1f       	adc	r25, r25
     7d6:	2a 95       	dec	r18
     7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <GPIOConfig+0xae>
     7da:	24 2f       	mov	r18, r20
     7dc:	28 2b       	or	r18, r24
     7de:	87 e2       	ldi	r24, 0x27	; 39
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	fc 01       	movw	r30, r24
     7e4:	20 83       	st	Z, r18
        }
        if(!strcmp(pin,"PB7")||!strcmp(pin,"PB6")||!strcmp(pin,"PB5")||!strcmp(pin,"PB4")||!strcmp(pin,"PB3")||
     7e6:	8a 81       	ldd	r24, Y+2	; 0x02
     7e8:	9b 81       	ldd	r25, Y+3	; 0x03
     7ea:	64 e3       	ldi	r22, 0x34	; 52
     7ec:	71 e0       	ldi	r23, 0x01	; 1
     7ee:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     7f2:	89 2b       	or	r24, r25
     7f4:	c1 f1       	breq	.+112    	; 0x866 <GPIOConfig+0x142>
     7f6:	8a 81       	ldd	r24, Y+2	; 0x02
     7f8:	9b 81       	ldd	r25, Y+3	; 0x03
     7fa:	68 e3       	ldi	r22, 0x38	; 56
     7fc:	71 e0       	ldi	r23, 0x01	; 1
     7fe:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     802:	89 2b       	or	r24, r25
     804:	81 f1       	breq	.+96     	; 0x866 <GPIOConfig+0x142>
     806:	8a 81       	ldd	r24, Y+2	; 0x02
     808:	9b 81       	ldd	r25, Y+3	; 0x03
     80a:	6c e3       	ldi	r22, 0x3C	; 60
     80c:	71 e0       	ldi	r23, 0x01	; 1
     80e:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     812:	89 2b       	or	r24, r25
     814:	41 f1       	breq	.+80     	; 0x866 <GPIOConfig+0x142>
     816:	8a 81       	ldd	r24, Y+2	; 0x02
     818:	9b 81       	ldd	r25, Y+3	; 0x03
     81a:	60 e4       	ldi	r22, 0x40	; 64
     81c:	71 e0       	ldi	r23, 0x01	; 1
     81e:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     822:	89 2b       	or	r24, r25
     824:	01 f1       	breq	.+64     	; 0x866 <GPIOConfig+0x142>
     826:	8a 81       	ldd	r24, Y+2	; 0x02
     828:	9b 81       	ldd	r25, Y+3	; 0x03
     82a:	64 e4       	ldi	r22, 0x44	; 68
     82c:	71 e0       	ldi	r23, 0x01	; 1
     82e:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     832:	89 2b       	or	r24, r25
     834:	c1 f0       	breq	.+48     	; 0x866 <GPIOConfig+0x142>
           !strcmp(pin,"PB2")||!strcmp(pin,"PB1")||!strcmp(pin,"PB0"))
     836:	8a 81       	ldd	r24, Y+2	; 0x02
     838:	9b 81       	ldd	r25, Y+3	; 0x03
     83a:	68 e4       	ldi	r22, 0x48	; 72
     83c:	71 e0       	ldi	r23, 0x01	; 1
     83e:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
        if(!strcmp(pin,"PB7")||!strcmp(pin,"PB6")||!strcmp(pin,"PB5")||!strcmp(pin,"PB4")||!strcmp(pin,"PB3")||
     842:	89 2b       	or	r24, r25
     844:	81 f0       	breq	.+32     	; 0x866 <GPIOConfig+0x142>
           !strcmp(pin,"PB2")||!strcmp(pin,"PB1")||!strcmp(pin,"PB0"))
     846:	8a 81       	ldd	r24, Y+2	; 0x02
     848:	9b 81       	ldd	r25, Y+3	; 0x03
     84a:	6c e4       	ldi	r22, 0x4C	; 76
     84c:	71 e0       	ldi	r23, 0x01	; 1
     84e:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     852:	89 2b       	or	r24, r25
     854:	41 f0       	breq	.+16     	; 0x866 <GPIOConfig+0x142>
     856:	8a 81       	ldd	r24, Y+2	; 0x02
     858:	9b 81       	ldd	r25, Y+3	; 0x03
     85a:	60 e5       	ldi	r22, 0x50	; 80
     85c:	71 e0       	ldi	r23, 0x01	; 1
     85e:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     862:	89 2b       	or	r24, r25
     864:	a9 f4       	brne	.+42     	; 0x890 <GPIOConfig+0x16c>
        {
            SET_BIT(DDRB,bit);
     866:	84 e2       	ldi	r24, 0x24	; 36
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	fc 01       	movw	r30, r24
     86c:	80 81       	ld	r24, Z
     86e:	48 2f       	mov	r20, r24
     870:	89 81       	ldd	r24, Y+1	; 0x01
     872:	28 2f       	mov	r18, r24
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	02 c0       	rjmp	.+4      	; 0x880 <GPIOConfig+0x15c>
     87c:	88 0f       	add	r24, r24
     87e:	99 1f       	adc	r25, r25
     880:	2a 95       	dec	r18
     882:	e2 f7       	brpl	.-8      	; 0x87c <GPIOConfig+0x158>
     884:	24 2f       	mov	r18, r20
     886:	28 2b       	or	r18, r24
     888:	84 e2       	ldi	r24, 0x24	; 36
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	fc 01       	movw	r30, r24
     88e:	20 83       	st	Z, r18
        }
        if(!strcmp(pin,"PD7")||!strcmp(pin,"PD6")||!strcmp(pin,"PD5")||!strcmp(pin,"PD4")||!strcmp(pin,"PD3")||
     890:	8a 81       	ldd	r24, Y+2	; 0x02
     892:	9b 81       	ldd	r25, Y+3	; 0x03
     894:	64 e5       	ldi	r22, 0x54	; 84
     896:	71 e0       	ldi	r23, 0x01	; 1
     898:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     89c:	89 2b       	or	r24, r25
     89e:	c9 f1       	breq	.+114    	; 0x912 <__stack+0x13>
     8a0:	8a 81       	ldd	r24, Y+2	; 0x02
     8a2:	9b 81       	ldd	r25, Y+3	; 0x03
     8a4:	68 e5       	ldi	r22, 0x58	; 88
     8a6:	71 e0       	ldi	r23, 0x01	; 1
     8a8:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     8ac:	89 2b       	or	r24, r25
     8ae:	89 f1       	breq	.+98     	; 0x912 <__stack+0x13>
     8b0:	8a 81       	ldd	r24, Y+2	; 0x02
     8b2:	9b 81       	ldd	r25, Y+3	; 0x03
     8b4:	6c e5       	ldi	r22, 0x5C	; 92
     8b6:	71 e0       	ldi	r23, 0x01	; 1
     8b8:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     8bc:	89 2b       	or	r24, r25
     8be:	49 f1       	breq	.+82     	; 0x912 <__stack+0x13>
     8c0:	8a 81       	ldd	r24, Y+2	; 0x02
     8c2:	9b 81       	ldd	r25, Y+3	; 0x03
     8c4:	60 e6       	ldi	r22, 0x60	; 96
     8c6:	71 e0       	ldi	r23, 0x01	; 1
     8c8:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     8cc:	89 2b       	or	r24, r25
     8ce:	09 f1       	breq	.+66     	; 0x912 <__stack+0x13>
     8d0:	8a 81       	ldd	r24, Y+2	; 0x02
     8d2:	9b 81       	ldd	r25, Y+3	; 0x03
     8d4:	64 e6       	ldi	r22, 0x64	; 100
     8d6:	71 e0       	ldi	r23, 0x01	; 1
     8d8:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     8dc:	89 2b       	or	r24, r25
     8de:	c9 f0       	breq	.+50     	; 0x912 <__stack+0x13>
           !strcmp(pin,"PD2")||!strcmp(pin,"PD1")||!strcmp(pin,"PD0"))
     8e0:	8a 81       	ldd	r24, Y+2	; 0x02
     8e2:	9b 81       	ldd	r25, Y+3	; 0x03
     8e4:	68 e6       	ldi	r22, 0x68	; 104
     8e6:	71 e0       	ldi	r23, 0x01	; 1
     8e8:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
        if(!strcmp(pin,"PD7")||!strcmp(pin,"PD6")||!strcmp(pin,"PD5")||!strcmp(pin,"PD4")||!strcmp(pin,"PD3")||
     8ec:	89 2b       	or	r24, r25
     8ee:	89 f0       	breq	.+34     	; 0x912 <__stack+0x13>
           !strcmp(pin,"PD2")||!strcmp(pin,"PD1")||!strcmp(pin,"PD0"))
     8f0:	8a 81       	ldd	r24, Y+2	; 0x02
     8f2:	9b 81       	ldd	r25, Y+3	; 0x03
     8f4:	6c e6       	ldi	r22, 0x6C	; 108
     8f6:	71 e0       	ldi	r23, 0x01	; 1
     8f8:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     8fc:	89 2b       	or	r24, r25
     8fe:	49 f0       	breq	.+18     	; 0x912 <__stack+0x13>
     900:	8a 81       	ldd	r24, Y+2	; 0x02
     902:	9b 81       	ldd	r25, Y+3	; 0x03
     904:	60 e7       	ldi	r22, 0x70	; 112
     906:	71 e0       	ldi	r23, 0x01	; 1
     908:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     90c:	89 2b       	or	r24, r25
     90e:	09 f0       	breq	.+2      	; 0x912 <__stack+0x13>
     910:	4f c1       	rjmp	.+670    	; 0xbb0 <__stack+0x2b1>
        {
            SET_BIT(DDRD,bit);
     912:	8a e2       	ldi	r24, 0x2A	; 42
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	fc 01       	movw	r30, r24
     918:	80 81       	ld	r24, Z
     91a:	48 2f       	mov	r20, r24
     91c:	89 81       	ldd	r24, Y+1	; 0x01
     91e:	28 2f       	mov	r18, r24
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0x2d>
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	2a 95       	dec	r18
     92e:	e2 f7       	brpl	.-8      	; 0x928 <__stack+0x29>
     930:	24 2f       	mov	r18, r20
     932:	28 2b       	or	r18, r24
     934:	8a e2       	ldi	r24, 0x2A	; 42
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	fc 01       	movw	r30, r24
     93a:	20 83       	st	Z, r18
        {
            CLR_BIT(DDRD,bit);
            SET_BIT(PORTD,bit);
        }
    }
}
     93c:	39 c1       	rjmp	.+626    	; 0xbb0 <__stack+0x2b1>
        if(!strcmp(pin,"PC6")||!strcmp(pin,"PC5")||!strcmp(pin,"PC4")||!strcmp(pin,"PC3")||
     93e:	8a 81       	ldd	r24, Y+2	; 0x02
     940:	9b 81       	ldd	r25, Y+3	; 0x03
     942:	68 e1       	ldi	r22, 0x18	; 24
     944:	71 e0       	ldi	r23, 0x01	; 1
     946:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     94a:	89 2b       	or	r24, r25
     94c:	81 f1       	breq	.+96     	; 0x9ae <__stack+0xaf>
     94e:	8a 81       	ldd	r24, Y+2	; 0x02
     950:	9b 81       	ldd	r25, Y+3	; 0x03
     952:	6c e1       	ldi	r22, 0x1C	; 28
     954:	71 e0       	ldi	r23, 0x01	; 1
     956:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     95a:	89 2b       	or	r24, r25
     95c:	41 f1       	breq	.+80     	; 0x9ae <__stack+0xaf>
     95e:	8a 81       	ldd	r24, Y+2	; 0x02
     960:	9b 81       	ldd	r25, Y+3	; 0x03
     962:	60 e2       	ldi	r22, 0x20	; 32
     964:	71 e0       	ldi	r23, 0x01	; 1
     966:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     96a:	89 2b       	or	r24, r25
     96c:	01 f1       	breq	.+64     	; 0x9ae <__stack+0xaf>
     96e:	8a 81       	ldd	r24, Y+2	; 0x02
     970:	9b 81       	ldd	r25, Y+3	; 0x03
     972:	64 e2       	ldi	r22, 0x24	; 36
     974:	71 e0       	ldi	r23, 0x01	; 1
     976:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     97a:	89 2b       	or	r24, r25
     97c:	c1 f0       	breq	.+48     	; 0x9ae <__stack+0xaf>
           !strcmp(pin,"PC2")||!strcmp(pin,"PC1")||!strcmp(pin,"PC0"))
     97e:	8a 81       	ldd	r24, Y+2	; 0x02
     980:	9b 81       	ldd	r25, Y+3	; 0x03
     982:	68 e2       	ldi	r22, 0x28	; 40
     984:	71 e0       	ldi	r23, 0x01	; 1
     986:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
        if(!strcmp(pin,"PC6")||!strcmp(pin,"PC5")||!strcmp(pin,"PC4")||!strcmp(pin,"PC3")||
     98a:	89 2b       	or	r24, r25
     98c:	81 f0       	breq	.+32     	; 0x9ae <__stack+0xaf>
           !strcmp(pin,"PC2")||!strcmp(pin,"PC1")||!strcmp(pin,"PC0"))
     98e:	8a 81       	ldd	r24, Y+2	; 0x02
     990:	9b 81       	ldd	r25, Y+3	; 0x03
     992:	6c e2       	ldi	r22, 0x2C	; 44
     994:	71 e0       	ldi	r23, 0x01	; 1
     996:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     99a:	89 2b       	or	r24, r25
     99c:	41 f0       	breq	.+16     	; 0x9ae <__stack+0xaf>
     99e:	8a 81       	ldd	r24, Y+2	; 0x02
     9a0:	9b 81       	ldd	r25, Y+3	; 0x03
     9a2:	60 e3       	ldi	r22, 0x30	; 48
     9a4:	71 e0       	ldi	r23, 0x01	; 1
     9a6:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     9aa:	89 2b       	or	r24, r25
     9ac:	59 f5       	brne	.+86     	; 0xa04 <__stack+0x105>
            CLR_BIT(DDRC,bit);
     9ae:	87 e2       	ldi	r24, 0x27	; 39
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	fc 01       	movw	r30, r24
     9b4:	80 81       	ld	r24, Z
     9b6:	48 2f       	mov	r20, r24
     9b8:	89 81       	ldd	r24, Y+1	; 0x01
     9ba:	28 2f       	mov	r18, r24
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <__stack+0xc9>
     9c4:	88 0f       	add	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	2a 95       	dec	r18
     9ca:	e2 f7       	brpl	.-8      	; 0x9c4 <__stack+0xc5>
     9cc:	80 95       	com	r24
     9ce:	24 2f       	mov	r18, r20
     9d0:	28 23       	and	r18, r24
     9d2:	87 e2       	ldi	r24, 0x27	; 39
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	fc 01       	movw	r30, r24
     9d8:	20 83       	st	Z, r18
            SET_BIT(PORTC,bit);
     9da:	88 e2       	ldi	r24, 0x28	; 40
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	fc 01       	movw	r30, r24
     9e0:	80 81       	ld	r24, Z
     9e2:	48 2f       	mov	r20, r24
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	28 2f       	mov	r18, r24
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <__stack+0xf5>
     9f0:	88 0f       	add	r24, r24
     9f2:	99 1f       	adc	r25, r25
     9f4:	2a 95       	dec	r18
     9f6:	e2 f7       	brpl	.-8      	; 0x9f0 <__stack+0xf1>
     9f8:	24 2f       	mov	r18, r20
     9fa:	28 2b       	or	r18, r24
     9fc:	88 e2       	ldi	r24, 0x28	; 40
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	fc 01       	movw	r30, r24
     a02:	20 83       	st	Z, r18
        if(!strcmp(pin,"PB7")||!strcmp(pin,"PB6")||!strcmp(pin,"PB5")||!strcmp(pin,"PB4")||!strcmp(pin,"PB3")||
     a04:	8a 81       	ldd	r24, Y+2	; 0x02
     a06:	9b 81       	ldd	r25, Y+3	; 0x03
     a08:	64 e3       	ldi	r22, 0x34	; 52
     a0a:	71 e0       	ldi	r23, 0x01	; 1
     a0c:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     a10:	89 2b       	or	r24, r25
     a12:	c1 f1       	breq	.+112    	; 0xa84 <__stack+0x185>
     a14:	8a 81       	ldd	r24, Y+2	; 0x02
     a16:	9b 81       	ldd	r25, Y+3	; 0x03
     a18:	68 e3       	ldi	r22, 0x38	; 56
     a1a:	71 e0       	ldi	r23, 0x01	; 1
     a1c:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     a20:	89 2b       	or	r24, r25
     a22:	81 f1       	breq	.+96     	; 0xa84 <__stack+0x185>
     a24:	8a 81       	ldd	r24, Y+2	; 0x02
     a26:	9b 81       	ldd	r25, Y+3	; 0x03
     a28:	6c e3       	ldi	r22, 0x3C	; 60
     a2a:	71 e0       	ldi	r23, 0x01	; 1
     a2c:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     a30:	89 2b       	or	r24, r25
     a32:	41 f1       	breq	.+80     	; 0xa84 <__stack+0x185>
     a34:	8a 81       	ldd	r24, Y+2	; 0x02
     a36:	9b 81       	ldd	r25, Y+3	; 0x03
     a38:	60 e4       	ldi	r22, 0x40	; 64
     a3a:	71 e0       	ldi	r23, 0x01	; 1
     a3c:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     a40:	89 2b       	or	r24, r25
     a42:	01 f1       	breq	.+64     	; 0xa84 <__stack+0x185>
     a44:	8a 81       	ldd	r24, Y+2	; 0x02
     a46:	9b 81       	ldd	r25, Y+3	; 0x03
     a48:	64 e4       	ldi	r22, 0x44	; 68
     a4a:	71 e0       	ldi	r23, 0x01	; 1
     a4c:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     a50:	89 2b       	or	r24, r25
     a52:	c1 f0       	breq	.+48     	; 0xa84 <__stack+0x185>
           !strcmp(pin,"PB2")||!strcmp(pin,"PB1")||!strcmp(pin,"PB0"))
     a54:	8a 81       	ldd	r24, Y+2	; 0x02
     a56:	9b 81       	ldd	r25, Y+3	; 0x03
     a58:	68 e4       	ldi	r22, 0x48	; 72
     a5a:	71 e0       	ldi	r23, 0x01	; 1
     a5c:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
        if(!strcmp(pin,"PB7")||!strcmp(pin,"PB6")||!strcmp(pin,"PB5")||!strcmp(pin,"PB4")||!strcmp(pin,"PB3")||
     a60:	89 2b       	or	r24, r25
     a62:	81 f0       	breq	.+32     	; 0xa84 <__stack+0x185>
           !strcmp(pin,"PB2")||!strcmp(pin,"PB1")||!strcmp(pin,"PB0"))
     a64:	8a 81       	ldd	r24, Y+2	; 0x02
     a66:	9b 81       	ldd	r25, Y+3	; 0x03
     a68:	6c e4       	ldi	r22, 0x4C	; 76
     a6a:	71 e0       	ldi	r23, 0x01	; 1
     a6c:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     a70:	89 2b       	or	r24, r25
     a72:	41 f0       	breq	.+16     	; 0xa84 <__stack+0x185>
     a74:	8a 81       	ldd	r24, Y+2	; 0x02
     a76:	9b 81       	ldd	r25, Y+3	; 0x03
     a78:	60 e5       	ldi	r22, 0x50	; 80
     a7a:	71 e0       	ldi	r23, 0x01	; 1
     a7c:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     a80:	89 2b       	or	r24, r25
     a82:	59 f5       	brne	.+86     	; 0xada <__stack+0x1db>
            CLR_BIT(DDRB,bit);
     a84:	84 e2       	ldi	r24, 0x24	; 36
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	fc 01       	movw	r30, r24
     a8a:	80 81       	ld	r24, Z
     a8c:	48 2f       	mov	r20, r24
     a8e:	89 81       	ldd	r24, Y+1	; 0x01
     a90:	28 2f       	mov	r18, r24
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <__stack+0x19f>
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	2a 95       	dec	r18
     aa0:	e2 f7       	brpl	.-8      	; 0xa9a <__stack+0x19b>
     aa2:	80 95       	com	r24
     aa4:	24 2f       	mov	r18, r20
     aa6:	28 23       	and	r18, r24
     aa8:	84 e2       	ldi	r24, 0x24	; 36
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	fc 01       	movw	r30, r24
     aae:	20 83       	st	Z, r18
            SET_BIT(PORTB,bit);
     ab0:	85 e2       	ldi	r24, 0x25	; 37
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	fc 01       	movw	r30, r24
     ab6:	80 81       	ld	r24, Z
     ab8:	48 2f       	mov	r20, r24
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	28 2f       	mov	r18, r24
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <__stack+0x1cb>
     ac6:	88 0f       	add	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	2a 95       	dec	r18
     acc:	e2 f7       	brpl	.-8      	; 0xac6 <__stack+0x1c7>
     ace:	24 2f       	mov	r18, r20
     ad0:	28 2b       	or	r18, r24
     ad2:	85 e2       	ldi	r24, 0x25	; 37
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	fc 01       	movw	r30, r24
     ad8:	20 83       	st	Z, r18
        if(!strcmp(pin,"PD7")||!strcmp(pin,"PD6")||!strcmp(pin,"PD5")||!strcmp(pin,"PD4")||!strcmp(pin,"PD3")||
     ada:	8a 81       	ldd	r24, Y+2	; 0x02
     adc:	9b 81       	ldd	r25, Y+3	; 0x03
     ade:	64 e5       	ldi	r22, 0x54	; 84
     ae0:	71 e0       	ldi	r23, 0x01	; 1
     ae2:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     ae6:	89 2b       	or	r24, r25
     ae8:	c1 f1       	breq	.+112    	; 0xb5a <__stack+0x25b>
     aea:	8a 81       	ldd	r24, Y+2	; 0x02
     aec:	9b 81       	ldd	r25, Y+3	; 0x03
     aee:	68 e5       	ldi	r22, 0x58	; 88
     af0:	71 e0       	ldi	r23, 0x01	; 1
     af2:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     af6:	89 2b       	or	r24, r25
     af8:	81 f1       	breq	.+96     	; 0xb5a <__stack+0x25b>
     afa:	8a 81       	ldd	r24, Y+2	; 0x02
     afc:	9b 81       	ldd	r25, Y+3	; 0x03
     afe:	6c e5       	ldi	r22, 0x5C	; 92
     b00:	71 e0       	ldi	r23, 0x01	; 1
     b02:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     b06:	89 2b       	or	r24, r25
     b08:	41 f1       	breq	.+80     	; 0xb5a <__stack+0x25b>
     b0a:	8a 81       	ldd	r24, Y+2	; 0x02
     b0c:	9b 81       	ldd	r25, Y+3	; 0x03
     b0e:	60 e6       	ldi	r22, 0x60	; 96
     b10:	71 e0       	ldi	r23, 0x01	; 1
     b12:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     b16:	89 2b       	or	r24, r25
     b18:	01 f1       	breq	.+64     	; 0xb5a <__stack+0x25b>
     b1a:	8a 81       	ldd	r24, Y+2	; 0x02
     b1c:	9b 81       	ldd	r25, Y+3	; 0x03
     b1e:	64 e6       	ldi	r22, 0x64	; 100
     b20:	71 e0       	ldi	r23, 0x01	; 1
     b22:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     b26:	89 2b       	or	r24, r25
     b28:	c1 f0       	breq	.+48     	; 0xb5a <__stack+0x25b>
           !strcmp(pin,"PD2")||!strcmp(pin,"PD1")||!strcmp(pin,"PD0"))
     b2a:	8a 81       	ldd	r24, Y+2	; 0x02
     b2c:	9b 81       	ldd	r25, Y+3	; 0x03
     b2e:	68 e6       	ldi	r22, 0x68	; 104
     b30:	71 e0       	ldi	r23, 0x01	; 1
     b32:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
        if(!strcmp(pin,"PD7")||!strcmp(pin,"PD6")||!strcmp(pin,"PD5")||!strcmp(pin,"PD4")||!strcmp(pin,"PD3")||
     b36:	89 2b       	or	r24, r25
     b38:	81 f0       	breq	.+32     	; 0xb5a <__stack+0x25b>
           !strcmp(pin,"PD2")||!strcmp(pin,"PD1")||!strcmp(pin,"PD0"))
     b3a:	8a 81       	ldd	r24, Y+2	; 0x02
     b3c:	9b 81       	ldd	r25, Y+3	; 0x03
     b3e:	6c e6       	ldi	r22, 0x6C	; 108
     b40:	71 e0       	ldi	r23, 0x01	; 1
     b42:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     b46:	89 2b       	or	r24, r25
     b48:	41 f0       	breq	.+16     	; 0xb5a <__stack+0x25b>
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	9b 81       	ldd	r25, Y+3	; 0x03
     b4e:	60 e7       	ldi	r22, 0x70	; 112
     b50:	71 e0       	ldi	r23, 0x01	; 1
     b52:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     b56:	89 2b       	or	r24, r25
     b58:	59 f5       	brne	.+86     	; 0xbb0 <__stack+0x2b1>
            CLR_BIT(DDRD,bit);
     b5a:	8a e2       	ldi	r24, 0x2A	; 42
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	fc 01       	movw	r30, r24
     b60:	80 81       	ld	r24, Z
     b62:	48 2f       	mov	r20, r24
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	28 2f       	mov	r18, r24
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <__stack+0x275>
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	2a 95       	dec	r18
     b76:	e2 f7       	brpl	.-8      	; 0xb70 <__stack+0x271>
     b78:	80 95       	com	r24
     b7a:	24 2f       	mov	r18, r20
     b7c:	28 23       	and	r18, r24
     b7e:	8a e2       	ldi	r24, 0x2A	; 42
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	fc 01       	movw	r30, r24
     b84:	20 83       	st	Z, r18
            SET_BIT(PORTD,bit);
     b86:	8b e2       	ldi	r24, 0x2B	; 43
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	fc 01       	movw	r30, r24
     b8c:	80 81       	ld	r24, Z
     b8e:	48 2f       	mov	r20, r24
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	28 2f       	mov	r18, r24
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <__stack+0x2a1>
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	2a 95       	dec	r18
     ba2:	e2 f7       	brpl	.-8      	; 0xb9c <__stack+0x29d>
     ba4:	24 2f       	mov	r18, r20
     ba6:	28 2b       	or	r18, r24
     ba8:	8b e2       	ldi	r24, 0x2B	; 43
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	fc 01       	movw	r30, r24
     bae:	20 83       	st	Z, r18
}
     bb0:	00 00       	nop
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	08 95       	ret

00000bc0 <GPIOPinWrite>:

* Arguments: pin and state
* Returns: None
******************************************************************************/
void GPIOPinWrite(const char pin[3],uint8_t state)
{
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	00 d0       	rcall	.+0      	; 0xbc6 <GPIOPinWrite+0x6>
     bc6:	00 d0       	rcall	.+0      	; 0xbc8 <GPIOPinWrite+0x8>
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	9b 83       	std	Y+3, r25	; 0x03
     bce:	8a 83       	std	Y+2, r24	; 0x02
     bd0:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t bit;
    bit=pin[2]-'0';
     bd2:	8a 81       	ldd	r24, Y+2	; 0x02
     bd4:	9b 81       	ldd	r25, Y+3	; 0x03
     bd6:	02 96       	adiw	r24, 0x02	; 2
     bd8:	fc 01       	movw	r30, r24
     bda:	80 81       	ld	r24, Z
     bdc:	80 53       	subi	r24, 0x30	; 48
     bde:	89 83       	std	Y+1, r24	; 0x01
    if(state==HIGH)
     be0:	8c 81       	ldd	r24, Y+4	; 0x04
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	09 f0       	breq	.+2      	; 0xbe8 <GPIOPinWrite+0x28>
     be6:	f9 c0       	rjmp	.+498    	; 0xdda <GPIOPinWrite+0x21a>
    {
        if(!strcmp(pin,"PC6")||!strcmp(pin,"PC5")||!strcmp(pin,"PC4")||!strcmp(pin,"PC3")||
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	9b 81       	ldd	r25, Y+3	; 0x03
     bec:	68 e1       	ldi	r22, 0x18	; 24
     bee:	71 e0       	ldi	r23, 0x01	; 1
     bf0:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     bf4:	89 2b       	or	r24, r25
     bf6:	81 f1       	breq	.+96     	; 0xc58 <GPIOPinWrite+0x98>
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	9b 81       	ldd	r25, Y+3	; 0x03
     bfc:	6c e1       	ldi	r22, 0x1C	; 28
     bfe:	71 e0       	ldi	r23, 0x01	; 1
     c00:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     c04:	89 2b       	or	r24, r25
     c06:	41 f1       	breq	.+80     	; 0xc58 <GPIOPinWrite+0x98>
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	9b 81       	ldd	r25, Y+3	; 0x03
     c0c:	60 e2       	ldi	r22, 0x20	; 32
     c0e:	71 e0       	ldi	r23, 0x01	; 1
     c10:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     c14:	89 2b       	or	r24, r25
     c16:	01 f1       	breq	.+64     	; 0xc58 <GPIOPinWrite+0x98>
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	9b 81       	ldd	r25, Y+3	; 0x03
     c1c:	64 e2       	ldi	r22, 0x24	; 36
     c1e:	71 e0       	ldi	r23, 0x01	; 1
     c20:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     c24:	89 2b       	or	r24, r25
     c26:	c1 f0       	breq	.+48     	; 0xc58 <GPIOPinWrite+0x98>
           !strcmp(pin,"PC2")||!strcmp(pin,"PC1")||!strcmp(pin,"PC0"))
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	9b 81       	ldd	r25, Y+3	; 0x03
     c2c:	68 e2       	ldi	r22, 0x28	; 40
     c2e:	71 e0       	ldi	r23, 0x01	; 1
     c30:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
        if(!strcmp(pin,"PC6")||!strcmp(pin,"PC5")||!strcmp(pin,"PC4")||!strcmp(pin,"PC3")||
     c34:	89 2b       	or	r24, r25
     c36:	81 f0       	breq	.+32     	; 0xc58 <GPIOPinWrite+0x98>
           !strcmp(pin,"PC2")||!strcmp(pin,"PC1")||!strcmp(pin,"PC0"))
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	9b 81       	ldd	r25, Y+3	; 0x03
     c3c:	6c e2       	ldi	r22, 0x2C	; 44
     c3e:	71 e0       	ldi	r23, 0x01	; 1
     c40:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     c44:	89 2b       	or	r24, r25
     c46:	41 f0       	breq	.+16     	; 0xc58 <GPIOPinWrite+0x98>
     c48:	8a 81       	ldd	r24, Y+2	; 0x02
     c4a:	9b 81       	ldd	r25, Y+3	; 0x03
     c4c:	60 e3       	ldi	r22, 0x30	; 48
     c4e:	71 e0       	ldi	r23, 0x01	; 1
     c50:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     c54:	89 2b       	or	r24, r25
     c56:	a9 f4       	brne	.+42     	; 0xc82 <GPIOPinWrite+0xc2>
        {
            SET_BIT(PORTC,bit);
     c58:	88 e2       	ldi	r24, 0x28	; 40
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	fc 01       	movw	r30, r24
     c5e:	80 81       	ld	r24, Z
     c60:	48 2f       	mov	r20, r24
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <GPIOPinWrite+0xb2>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	2a 95       	dec	r18
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <GPIOPinWrite+0xae>
     c76:	24 2f       	mov	r18, r20
     c78:	28 2b       	or	r18, r24
     c7a:	88 e2       	ldi	r24, 0x28	; 40
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	fc 01       	movw	r30, r24
     c80:	20 83       	st	Z, r18
        }
        if(!strcmp(pin,"PB7")||!strcmp(pin,"PB6")||!strcmp(pin,"PB5")||!strcmp(pin,"PB4")||!strcmp(pin,"PB3")||
     c82:	8a 81       	ldd	r24, Y+2	; 0x02
     c84:	9b 81       	ldd	r25, Y+3	; 0x03
     c86:	64 e3       	ldi	r22, 0x34	; 52
     c88:	71 e0       	ldi	r23, 0x01	; 1
     c8a:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     c8e:	89 2b       	or	r24, r25
     c90:	c1 f1       	breq	.+112    	; 0xd02 <GPIOPinWrite+0x142>
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	9b 81       	ldd	r25, Y+3	; 0x03
     c96:	68 e3       	ldi	r22, 0x38	; 56
     c98:	71 e0       	ldi	r23, 0x01	; 1
     c9a:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     c9e:	89 2b       	or	r24, r25
     ca0:	81 f1       	breq	.+96     	; 0xd02 <GPIOPinWrite+0x142>
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	9b 81       	ldd	r25, Y+3	; 0x03
     ca6:	6c e3       	ldi	r22, 0x3C	; 60
     ca8:	71 e0       	ldi	r23, 0x01	; 1
     caa:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     cae:	89 2b       	or	r24, r25
     cb0:	41 f1       	breq	.+80     	; 0xd02 <GPIOPinWrite+0x142>
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	9b 81       	ldd	r25, Y+3	; 0x03
     cb6:	60 e4       	ldi	r22, 0x40	; 64
     cb8:	71 e0       	ldi	r23, 0x01	; 1
     cba:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     cbe:	89 2b       	or	r24, r25
     cc0:	01 f1       	breq	.+64     	; 0xd02 <GPIOPinWrite+0x142>
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	9b 81       	ldd	r25, Y+3	; 0x03
     cc6:	64 e4       	ldi	r22, 0x44	; 68
     cc8:	71 e0       	ldi	r23, 0x01	; 1
     cca:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     cce:	89 2b       	or	r24, r25
     cd0:	c1 f0       	breq	.+48     	; 0xd02 <GPIOPinWrite+0x142>
           !strcmp(pin,"PB2")||!strcmp(pin,"PB1")||!strcmp(pin,"PB0"))
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	9b 81       	ldd	r25, Y+3	; 0x03
     cd6:	68 e4       	ldi	r22, 0x48	; 72
     cd8:	71 e0       	ldi	r23, 0x01	; 1
     cda:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
        if(!strcmp(pin,"PB7")||!strcmp(pin,"PB6")||!strcmp(pin,"PB5")||!strcmp(pin,"PB4")||!strcmp(pin,"PB3")||
     cde:	89 2b       	or	r24, r25
     ce0:	81 f0       	breq	.+32     	; 0xd02 <GPIOPinWrite+0x142>
           !strcmp(pin,"PB2")||!strcmp(pin,"PB1")||!strcmp(pin,"PB0"))
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	9b 81       	ldd	r25, Y+3	; 0x03
     ce6:	6c e4       	ldi	r22, 0x4C	; 76
     ce8:	71 e0       	ldi	r23, 0x01	; 1
     cea:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     cee:	89 2b       	or	r24, r25
     cf0:	41 f0       	breq	.+16     	; 0xd02 <GPIOPinWrite+0x142>
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	9b 81       	ldd	r25, Y+3	; 0x03
     cf6:	60 e5       	ldi	r22, 0x50	; 80
     cf8:	71 e0       	ldi	r23, 0x01	; 1
     cfa:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     cfe:	89 2b       	or	r24, r25
     d00:	a9 f4       	brne	.+42     	; 0xd2c <GPIOPinWrite+0x16c>
        {
            SET_BIT(PORTB,bit);
     d02:	85 e2       	ldi	r24, 0x25	; 37
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	fc 01       	movw	r30, r24
     d08:	80 81       	ld	r24, Z
     d0a:	48 2f       	mov	r20, r24
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <GPIOPinWrite+0x15c>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	2a 95       	dec	r18
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <GPIOPinWrite+0x158>
     d20:	24 2f       	mov	r18, r20
     d22:	28 2b       	or	r18, r24
     d24:	85 e2       	ldi	r24, 0x25	; 37
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	fc 01       	movw	r30, r24
     d2a:	20 83       	st	Z, r18
        }
        if(!strcmp(pin,"PD7")||!strcmp(pin,"PD6")||!strcmp(pin,"PD5")||!strcmp(pin,"PD4")||!strcmp(pin,"PD3")||
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	9b 81       	ldd	r25, Y+3	; 0x03
     d30:	64 e5       	ldi	r22, 0x54	; 84
     d32:	71 e0       	ldi	r23, 0x01	; 1
     d34:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     d38:	89 2b       	or	r24, r25
     d3a:	c9 f1       	breq	.+114    	; 0xdae <GPIOPinWrite+0x1ee>
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	9b 81       	ldd	r25, Y+3	; 0x03
     d40:	68 e5       	ldi	r22, 0x58	; 88
     d42:	71 e0       	ldi	r23, 0x01	; 1
     d44:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     d48:	89 2b       	or	r24, r25
     d4a:	89 f1       	breq	.+98     	; 0xdae <GPIOPinWrite+0x1ee>
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	9b 81       	ldd	r25, Y+3	; 0x03
     d50:	6c e5       	ldi	r22, 0x5C	; 92
     d52:	71 e0       	ldi	r23, 0x01	; 1
     d54:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     d58:	89 2b       	or	r24, r25
     d5a:	49 f1       	breq	.+82     	; 0xdae <GPIOPinWrite+0x1ee>
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	9b 81       	ldd	r25, Y+3	; 0x03
     d60:	60 e6       	ldi	r22, 0x60	; 96
     d62:	71 e0       	ldi	r23, 0x01	; 1
     d64:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     d68:	89 2b       	or	r24, r25
     d6a:	09 f1       	breq	.+66     	; 0xdae <GPIOPinWrite+0x1ee>
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	9b 81       	ldd	r25, Y+3	; 0x03
     d70:	64 e6       	ldi	r22, 0x64	; 100
     d72:	71 e0       	ldi	r23, 0x01	; 1
     d74:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     d78:	89 2b       	or	r24, r25
     d7a:	c9 f0       	breq	.+50     	; 0xdae <GPIOPinWrite+0x1ee>
           !strcmp(pin,"PD2")||!strcmp(pin,"PD1")||!strcmp(pin,"PD0"))
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	9b 81       	ldd	r25, Y+3	; 0x03
     d80:	68 e6       	ldi	r22, 0x68	; 104
     d82:	71 e0       	ldi	r23, 0x01	; 1
     d84:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
        if(!strcmp(pin,"PD7")||!strcmp(pin,"PD6")||!strcmp(pin,"PD5")||!strcmp(pin,"PD4")||!strcmp(pin,"PD3")||
     d88:	89 2b       	or	r24, r25
     d8a:	89 f0       	breq	.+34     	; 0xdae <GPIOPinWrite+0x1ee>
           !strcmp(pin,"PD2")||!strcmp(pin,"PD1")||!strcmp(pin,"PD0"))
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	9b 81       	ldd	r25, Y+3	; 0x03
     d90:	6c e6       	ldi	r22, 0x6C	; 108
     d92:	71 e0       	ldi	r23, 0x01	; 1
     d94:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     d98:	89 2b       	or	r24, r25
     d9a:	49 f0       	breq	.+18     	; 0xdae <GPIOPinWrite+0x1ee>
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	9b 81       	ldd	r25, Y+3	; 0x03
     da0:	60 e7       	ldi	r22, 0x70	; 112
     da2:	71 e0       	ldi	r23, 0x01	; 1
     da4:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     da8:	89 2b       	or	r24, r25
     daa:	09 f0       	breq	.+2      	; 0xdae <GPIOPinWrite+0x1ee>
     dac:	10 c1       	rjmp	.+544    	; 0xfce <GPIOPinWrite+0x40e>
        {
            SET_BIT(PORTD,bit);
     dae:	8b e2       	ldi	r24, 0x2B	; 43
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	fc 01       	movw	r30, r24
     db4:	80 81       	ld	r24, Z
     db6:	48 2f       	mov	r20, r24
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	28 2f       	mov	r18, r24
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <GPIOPinWrite+0x208>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	2a 95       	dec	r18
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <GPIOPinWrite+0x204>
     dcc:	24 2f       	mov	r18, r20
     dce:	28 2b       	or	r18, r24
     dd0:	8b e2       	ldi	r24, 0x2B	; 43
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	fc 01       	movw	r30, r24
     dd6:	20 83       	st	Z, r18
           !strcmp(pin,"PD2")||!strcmp(pin,"PD1")||!strcmp(pin,"PD0"))
        {
            CLR_BIT(PORTD,bit);
        }
    }
}
     dd8:	fa c0       	rjmp	.+500    	; 0xfce <GPIOPinWrite+0x40e>
        if(!strcmp(pin,"PC6")||!strcmp(pin,"PC5")||!strcmp(pin,"PC4")||!strcmp(pin,"PC3")||
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	9b 81       	ldd	r25, Y+3	; 0x03
     dde:	68 e1       	ldi	r22, 0x18	; 24
     de0:	71 e0       	ldi	r23, 0x01	; 1
     de2:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     de6:	89 2b       	or	r24, r25
     de8:	81 f1       	breq	.+96     	; 0xe4a <GPIOPinWrite+0x28a>
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	9b 81       	ldd	r25, Y+3	; 0x03
     dee:	6c e1       	ldi	r22, 0x1C	; 28
     df0:	71 e0       	ldi	r23, 0x01	; 1
     df2:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     df6:	89 2b       	or	r24, r25
     df8:	41 f1       	breq	.+80     	; 0xe4a <GPIOPinWrite+0x28a>
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	9b 81       	ldd	r25, Y+3	; 0x03
     dfe:	60 e2       	ldi	r22, 0x20	; 32
     e00:	71 e0       	ldi	r23, 0x01	; 1
     e02:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     e06:	89 2b       	or	r24, r25
     e08:	01 f1       	breq	.+64     	; 0xe4a <GPIOPinWrite+0x28a>
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	9b 81       	ldd	r25, Y+3	; 0x03
     e0e:	64 e2       	ldi	r22, 0x24	; 36
     e10:	71 e0       	ldi	r23, 0x01	; 1
     e12:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     e16:	89 2b       	or	r24, r25
     e18:	c1 f0       	breq	.+48     	; 0xe4a <GPIOPinWrite+0x28a>
           !strcmp(pin,"PC2")||!strcmp(pin,"PC1")||!strcmp(pin,"PC0"))
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	9b 81       	ldd	r25, Y+3	; 0x03
     e1e:	68 e2       	ldi	r22, 0x28	; 40
     e20:	71 e0       	ldi	r23, 0x01	; 1
     e22:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
        if(!strcmp(pin,"PC6")||!strcmp(pin,"PC5")||!strcmp(pin,"PC4")||!strcmp(pin,"PC3")||
     e26:	89 2b       	or	r24, r25
     e28:	81 f0       	breq	.+32     	; 0xe4a <GPIOPinWrite+0x28a>
           !strcmp(pin,"PC2")||!strcmp(pin,"PC1")||!strcmp(pin,"PC0"))
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	9b 81       	ldd	r25, Y+3	; 0x03
     e2e:	6c e2       	ldi	r22, 0x2C	; 44
     e30:	71 e0       	ldi	r23, 0x01	; 1
     e32:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     e36:	89 2b       	or	r24, r25
     e38:	41 f0       	breq	.+16     	; 0xe4a <GPIOPinWrite+0x28a>
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	9b 81       	ldd	r25, Y+3	; 0x03
     e3e:	60 e3       	ldi	r22, 0x30	; 48
     e40:	71 e0       	ldi	r23, 0x01	; 1
     e42:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     e46:	89 2b       	or	r24, r25
     e48:	b1 f4       	brne	.+44     	; 0xe76 <GPIOPinWrite+0x2b6>
            CLR_BIT(PORTC,bit);
     e4a:	88 e2       	ldi	r24, 0x28	; 40
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	fc 01       	movw	r30, r24
     e50:	80 81       	ld	r24, Z
     e52:	48 2f       	mov	r20, r24
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <GPIOPinWrite+0x2a4>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	2a 95       	dec	r18
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <GPIOPinWrite+0x2a0>
     e68:	80 95       	com	r24
     e6a:	24 2f       	mov	r18, r20
     e6c:	28 23       	and	r18, r24
     e6e:	88 e2       	ldi	r24, 0x28	; 40
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	fc 01       	movw	r30, r24
     e74:	20 83       	st	Z, r18
        if(!strcmp(pin,"PB7")||!strcmp(pin,"PB6")||!strcmp(pin,"PB5")||!strcmp(pin,"PB4")||!strcmp(pin,"PB3")||
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	9b 81       	ldd	r25, Y+3	; 0x03
     e7a:	64 e3       	ldi	r22, 0x34	; 52
     e7c:	71 e0       	ldi	r23, 0x01	; 1
     e7e:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     e82:	89 2b       	or	r24, r25
     e84:	c1 f1       	breq	.+112    	; 0xef6 <GPIOPinWrite+0x336>
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	9b 81       	ldd	r25, Y+3	; 0x03
     e8a:	68 e3       	ldi	r22, 0x38	; 56
     e8c:	71 e0       	ldi	r23, 0x01	; 1
     e8e:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     e92:	89 2b       	or	r24, r25
     e94:	81 f1       	breq	.+96     	; 0xef6 <GPIOPinWrite+0x336>
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	9b 81       	ldd	r25, Y+3	; 0x03
     e9a:	6c e3       	ldi	r22, 0x3C	; 60
     e9c:	71 e0       	ldi	r23, 0x01	; 1
     e9e:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     ea2:	89 2b       	or	r24, r25
     ea4:	41 f1       	breq	.+80     	; 0xef6 <GPIOPinWrite+0x336>
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	9b 81       	ldd	r25, Y+3	; 0x03
     eaa:	60 e4       	ldi	r22, 0x40	; 64
     eac:	71 e0       	ldi	r23, 0x01	; 1
     eae:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     eb2:	89 2b       	or	r24, r25
     eb4:	01 f1       	breq	.+64     	; 0xef6 <GPIOPinWrite+0x336>
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	9b 81       	ldd	r25, Y+3	; 0x03
     eba:	64 e4       	ldi	r22, 0x44	; 68
     ebc:	71 e0       	ldi	r23, 0x01	; 1
     ebe:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     ec2:	89 2b       	or	r24, r25
     ec4:	c1 f0       	breq	.+48     	; 0xef6 <GPIOPinWrite+0x336>
           !strcmp(pin,"PB2")||!strcmp(pin,"PB1")||!strcmp(pin,"PB0"))
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	9b 81       	ldd	r25, Y+3	; 0x03
     eca:	68 e4       	ldi	r22, 0x48	; 72
     ecc:	71 e0       	ldi	r23, 0x01	; 1
     ece:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
        if(!strcmp(pin,"PB7")||!strcmp(pin,"PB6")||!strcmp(pin,"PB5")||!strcmp(pin,"PB4")||!strcmp(pin,"PB3")||
     ed2:	89 2b       	or	r24, r25
     ed4:	81 f0       	breq	.+32     	; 0xef6 <GPIOPinWrite+0x336>
           !strcmp(pin,"PB2")||!strcmp(pin,"PB1")||!strcmp(pin,"PB0"))
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	9b 81       	ldd	r25, Y+3	; 0x03
     eda:	6c e4       	ldi	r22, 0x4C	; 76
     edc:	71 e0       	ldi	r23, 0x01	; 1
     ede:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     ee2:	89 2b       	or	r24, r25
     ee4:	41 f0       	breq	.+16     	; 0xef6 <GPIOPinWrite+0x336>
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	9b 81       	ldd	r25, Y+3	; 0x03
     eea:	60 e5       	ldi	r22, 0x50	; 80
     eec:	71 e0       	ldi	r23, 0x01	; 1
     eee:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     ef2:	89 2b       	or	r24, r25
     ef4:	b1 f4       	brne	.+44     	; 0xf22 <GPIOPinWrite+0x362>
            CLR_BIT(PORTB,bit);
     ef6:	85 e2       	ldi	r24, 0x25	; 37
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	fc 01       	movw	r30, r24
     efc:	80 81       	ld	r24, Z
     efe:	48 2f       	mov	r20, r24
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <GPIOPinWrite+0x350>
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	2a 95       	dec	r18
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <GPIOPinWrite+0x34c>
     f14:	80 95       	com	r24
     f16:	24 2f       	mov	r18, r20
     f18:	28 23       	and	r18, r24
     f1a:	85 e2       	ldi	r24, 0x25	; 37
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	fc 01       	movw	r30, r24
     f20:	20 83       	st	Z, r18
        if(!strcmp(pin,"PD7")||!strcmp(pin,"PD6")||!strcmp(pin,"PD5")||!strcmp(pin,"PD4")||!strcmp(pin,"PD3")||
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	9b 81       	ldd	r25, Y+3	; 0x03
     f26:	64 e5       	ldi	r22, 0x54	; 84
     f28:	71 e0       	ldi	r23, 0x01	; 1
     f2a:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     f2e:	89 2b       	or	r24, r25
     f30:	c1 f1       	breq	.+112    	; 0xfa2 <GPIOPinWrite+0x3e2>
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	9b 81       	ldd	r25, Y+3	; 0x03
     f36:	68 e5       	ldi	r22, 0x58	; 88
     f38:	71 e0       	ldi	r23, 0x01	; 1
     f3a:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     f3e:	89 2b       	or	r24, r25
     f40:	81 f1       	breq	.+96     	; 0xfa2 <GPIOPinWrite+0x3e2>
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	9b 81       	ldd	r25, Y+3	; 0x03
     f46:	6c e5       	ldi	r22, 0x5C	; 92
     f48:	71 e0       	ldi	r23, 0x01	; 1
     f4a:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     f4e:	89 2b       	or	r24, r25
     f50:	41 f1       	breq	.+80     	; 0xfa2 <GPIOPinWrite+0x3e2>
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	9b 81       	ldd	r25, Y+3	; 0x03
     f56:	60 e6       	ldi	r22, 0x60	; 96
     f58:	71 e0       	ldi	r23, 0x01	; 1
     f5a:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     f5e:	89 2b       	or	r24, r25
     f60:	01 f1       	breq	.+64     	; 0xfa2 <GPIOPinWrite+0x3e2>
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	9b 81       	ldd	r25, Y+3	; 0x03
     f66:	64 e6       	ldi	r22, 0x64	; 100
     f68:	71 e0       	ldi	r23, 0x01	; 1
     f6a:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     f6e:	89 2b       	or	r24, r25
     f70:	c1 f0       	breq	.+48     	; 0xfa2 <GPIOPinWrite+0x3e2>
           !strcmp(pin,"PD2")||!strcmp(pin,"PD1")||!strcmp(pin,"PD0"))
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	9b 81       	ldd	r25, Y+3	; 0x03
     f76:	68 e6       	ldi	r22, 0x68	; 104
     f78:	71 e0       	ldi	r23, 0x01	; 1
     f7a:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
        if(!strcmp(pin,"PD7")||!strcmp(pin,"PD6")||!strcmp(pin,"PD5")||!strcmp(pin,"PD4")||!strcmp(pin,"PD3")||
     f7e:	89 2b       	or	r24, r25
     f80:	81 f0       	breq	.+32     	; 0xfa2 <GPIOPinWrite+0x3e2>
           !strcmp(pin,"PD2")||!strcmp(pin,"PD1")||!strcmp(pin,"PD0"))
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	9b 81       	ldd	r25, Y+3	; 0x03
     f86:	6c e6       	ldi	r22, 0x6C	; 108
     f88:	71 e0       	ldi	r23, 0x01	; 1
     f8a:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     f8e:	89 2b       	or	r24, r25
     f90:	41 f0       	breq	.+16     	; 0xfa2 <GPIOPinWrite+0x3e2>
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	9b 81       	ldd	r25, Y+3	; 0x03
     f96:	60 e7       	ldi	r22, 0x70	; 112
     f98:	71 e0       	ldi	r23, 0x01	; 1
     f9a:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     f9e:	89 2b       	or	r24, r25
     fa0:	b1 f4       	brne	.+44     	; 0xfce <GPIOPinWrite+0x40e>
            CLR_BIT(PORTD,bit);
     fa2:	8b e2       	ldi	r24, 0x2B	; 43
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	fc 01       	movw	r30, r24
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <GPIOPinWrite+0x3fc>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	2a 95       	dec	r18
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <GPIOPinWrite+0x3f8>
     fc0:	80 95       	com	r24
     fc2:	24 2f       	mov	r18, r20
     fc4:	28 23       	and	r18, r24
     fc6:	8b e2       	ldi	r24, 0x2B	; 43
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	fc 01       	movw	r30, r24
     fcc:	20 83       	st	Z, r18
}
     fce:	00 00       	nop
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	08 95       	ret

00000fde <GPIOPinRead>:

* Arguments: pin
* Returns: state
******************************************************************************/
uint8_t GPIOPinRead(const char pin[3])
{
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <GPIOPinRead+0x6>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <GPIOPinRead+0x8>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	9c 83       	std	Y+4, r25	; 0x04
     fec:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t bit;
    uint8_t state=HIGH;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	89 83       	std	Y+1, r24	; 0x01
    bit=pin[2]-'0';
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	9c 81       	ldd	r25, Y+4	; 0x04
     ff6:	02 96       	adiw	r24, 0x02	; 2
     ff8:	fc 01       	movw	r30, r24
     ffa:	80 81       	ld	r24, Z
     ffc:	80 53       	subi	r24, 0x30	; 48
     ffe:	8a 83       	std	Y+2, r24	; 0x02
    if(!strcmp(pin,"PC6")||!strcmp(pin,"PC5")||!strcmp(pin,"PC4")||!strcmp(pin,"PC3")||
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	9c 81       	ldd	r25, Y+4	; 0x04
    1004:	68 e1       	ldi	r22, 0x18	; 24
    1006:	71 e0       	ldi	r23, 0x01	; 1
    1008:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    100c:	89 2b       	or	r24, r25
    100e:	81 f1       	breq	.+96     	; 0x1070 <GPIOPinRead+0x92>
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
    1014:	6c e1       	ldi	r22, 0x1C	; 28
    1016:	71 e0       	ldi	r23, 0x01	; 1
    1018:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    101c:	89 2b       	or	r24, r25
    101e:	41 f1       	breq	.+80     	; 0x1070 <GPIOPinRead+0x92>
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	9c 81       	ldd	r25, Y+4	; 0x04
    1024:	60 e2       	ldi	r22, 0x20	; 32
    1026:	71 e0       	ldi	r23, 0x01	; 1
    1028:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    102c:	89 2b       	or	r24, r25
    102e:	01 f1       	breq	.+64     	; 0x1070 <GPIOPinRead+0x92>
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	9c 81       	ldd	r25, Y+4	; 0x04
    1034:	64 e2       	ldi	r22, 0x24	; 36
    1036:	71 e0       	ldi	r23, 0x01	; 1
    1038:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    103c:	89 2b       	or	r24, r25
    103e:	c1 f0       	breq	.+48     	; 0x1070 <GPIOPinRead+0x92>
       !strcmp(pin,"PC2")||!strcmp(pin,"PC1")||!strcmp(pin,"PC0"))
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	9c 81       	ldd	r25, Y+4	; 0x04
    1044:	68 e2       	ldi	r22, 0x28	; 40
    1046:	71 e0       	ldi	r23, 0x01	; 1
    1048:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    if(!strcmp(pin,"PC6")||!strcmp(pin,"PC5")||!strcmp(pin,"PC4")||!strcmp(pin,"PC3")||
    104c:	89 2b       	or	r24, r25
    104e:	81 f0       	breq	.+32     	; 0x1070 <GPIOPinRead+0x92>
       !strcmp(pin,"PC2")||!strcmp(pin,"PC1")||!strcmp(pin,"PC0"))
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	6c e2       	ldi	r22, 0x2C	; 44
    1056:	71 e0       	ldi	r23, 0x01	; 1
    1058:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    105c:	89 2b       	or	r24, r25
    105e:	41 f0       	breq	.+16     	; 0x1070 <GPIOPinRead+0x92>
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	9c 81       	ldd	r25, Y+4	; 0x04
    1064:	60 e3       	ldi	r22, 0x30	; 48
    1066:	71 e0       	ldi	r23, 0x01	; 1
    1068:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    106c:	89 2b       	or	r24, r25
    106e:	b1 f4       	brne	.+44     	; 0x109c <GPIOPinRead+0xbe>
    {
        if(PINC&(1<<bit))
    1070:	86 e2       	ldi	r24, 0x26	; 38
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	fc 01       	movw	r30, r24
    1076:	80 81       	ld	r24, Z
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	2a 81       	ldd	r18, Y+2	; 0x02
    107e:	22 2f       	mov	r18, r18
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <GPIOPinRead+0xaa>
    1084:	95 95       	asr	r25
    1086:	87 95       	ror	r24
    1088:	2a 95       	dec	r18
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <GPIOPinRead+0xa6>
    108c:	81 70       	andi	r24, 0x01	; 1
    108e:	99 27       	eor	r25, r25
    1090:	89 2b       	or	r24, r25
    1092:	19 f0       	breq	.+6      	; 0x109a <GPIOPinRead+0xbc>
        {
            state=HIGH;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	01 c0       	rjmp	.+2      	; 0x109c <GPIOPinRead+0xbe>
        }
        else
        {
            state=LOW;
    109a:	19 82       	std	Y+1, r1	; 0x01
        }
    }
    if(!strcmp(pin,"PB7")||!strcmp(pin,"PB6")||!strcmp(pin,"PB5")||!strcmp(pin,"PB4")||!strcmp(pin,"PB3")||
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	9c 81       	ldd	r25, Y+4	; 0x04
    10a0:	64 e3       	ldi	r22, 0x34	; 52
    10a2:	71 e0       	ldi	r23, 0x01	; 1
    10a4:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    10a8:	89 2b       	or	r24, r25
    10aa:	c1 f1       	breq	.+112    	; 0x111c <GPIOPinRead+0x13e>
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	9c 81       	ldd	r25, Y+4	; 0x04
    10b0:	68 e3       	ldi	r22, 0x38	; 56
    10b2:	71 e0       	ldi	r23, 0x01	; 1
    10b4:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    10b8:	89 2b       	or	r24, r25
    10ba:	81 f1       	breq	.+96     	; 0x111c <GPIOPinRead+0x13e>
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9c 81       	ldd	r25, Y+4	; 0x04
    10c0:	6c e3       	ldi	r22, 0x3C	; 60
    10c2:	71 e0       	ldi	r23, 0x01	; 1
    10c4:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    10c8:	89 2b       	or	r24, r25
    10ca:	41 f1       	breq	.+80     	; 0x111c <GPIOPinRead+0x13e>
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	9c 81       	ldd	r25, Y+4	; 0x04
    10d0:	60 e4       	ldi	r22, 0x40	; 64
    10d2:	71 e0       	ldi	r23, 0x01	; 1
    10d4:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    10d8:	89 2b       	or	r24, r25
    10da:	01 f1       	breq	.+64     	; 0x111c <GPIOPinRead+0x13e>
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	64 e4       	ldi	r22, 0x44	; 68
    10e2:	71 e0       	ldi	r23, 0x01	; 1
    10e4:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    10e8:	89 2b       	or	r24, r25
    10ea:	c1 f0       	breq	.+48     	; 0x111c <GPIOPinRead+0x13e>
       !strcmp(pin,"PB2")||!strcmp(pin,"PB1")||!strcmp(pin,"PB0"))
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	68 e4       	ldi	r22, 0x48	; 72
    10f2:	71 e0       	ldi	r23, 0x01	; 1
    10f4:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    if(!strcmp(pin,"PB7")||!strcmp(pin,"PB6")||!strcmp(pin,"PB5")||!strcmp(pin,"PB4")||!strcmp(pin,"PB3")||
    10f8:	89 2b       	or	r24, r25
    10fa:	81 f0       	breq	.+32     	; 0x111c <GPIOPinRead+0x13e>
       !strcmp(pin,"PB2")||!strcmp(pin,"PB1")||!strcmp(pin,"PB0"))
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1100:	6c e4       	ldi	r22, 0x4C	; 76
    1102:	71 e0       	ldi	r23, 0x01	; 1
    1104:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    1108:	89 2b       	or	r24, r25
    110a:	41 f0       	breq	.+16     	; 0x111c <GPIOPinRead+0x13e>
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	9c 81       	ldd	r25, Y+4	; 0x04
    1110:	60 e5       	ldi	r22, 0x50	; 80
    1112:	71 e0       	ldi	r23, 0x01	; 1
    1114:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    1118:	89 2b       	or	r24, r25
    111a:	b1 f4       	brne	.+44     	; 0x1148 <GPIOPinRead+0x16a>
    {
        if(PINB&(1<<bit))
    111c:	83 e2       	ldi	r24, 0x23	; 35
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	fc 01       	movw	r30, r24
    1122:	80 81       	ld	r24, Z
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	2a 81       	ldd	r18, Y+2	; 0x02
    112a:	22 2f       	mov	r18, r18
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <GPIOPinRead+0x156>
    1130:	95 95       	asr	r25
    1132:	87 95       	ror	r24
    1134:	2a 95       	dec	r18
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <GPIOPinRead+0x152>
    1138:	81 70       	andi	r24, 0x01	; 1
    113a:	99 27       	eor	r25, r25
    113c:	89 2b       	or	r24, r25
    113e:	19 f0       	breq	.+6      	; 0x1146 <GPIOPinRead+0x168>
        {
            state=HIGH;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	89 83       	std	Y+1, r24	; 0x01
    1144:	01 c0       	rjmp	.+2      	; 0x1148 <GPIOPinRead+0x16a>
        }
        else
        {
            state=LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01
        }
    }
    if(!strcmp(pin,"PD7")||!strcmp(pin,"PD6")||!strcmp(pin,"PD5")||!strcmp(pin,"PD4")||!strcmp(pin,"PD3")||
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	9c 81       	ldd	r25, Y+4	; 0x04
    114c:	64 e5       	ldi	r22, 0x54	; 84
    114e:	71 e0       	ldi	r23, 0x01	; 1
    1150:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    1154:	89 2b       	or	r24, r25
    1156:	c1 f1       	breq	.+112    	; 0x11c8 <GPIOPinRead+0x1ea>
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	68 e5       	ldi	r22, 0x58	; 88
    115e:	71 e0       	ldi	r23, 0x01	; 1
    1160:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    1164:	89 2b       	or	r24, r25
    1166:	81 f1       	breq	.+96     	; 0x11c8 <GPIOPinRead+0x1ea>
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	9c 81       	ldd	r25, Y+4	; 0x04
    116c:	6c e5       	ldi	r22, 0x5C	; 92
    116e:	71 e0       	ldi	r23, 0x01	; 1
    1170:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    1174:	89 2b       	or	r24, r25
    1176:	41 f1       	breq	.+80     	; 0x11c8 <GPIOPinRead+0x1ea>
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	60 e6       	ldi	r22, 0x60	; 96
    117e:	71 e0       	ldi	r23, 0x01	; 1
    1180:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    1184:	89 2b       	or	r24, r25
    1186:	01 f1       	breq	.+64     	; 0x11c8 <GPIOPinRead+0x1ea>
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	64 e6       	ldi	r22, 0x64	; 100
    118e:	71 e0       	ldi	r23, 0x01	; 1
    1190:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    1194:	89 2b       	or	r24, r25
    1196:	c1 f0       	breq	.+48     	; 0x11c8 <GPIOPinRead+0x1ea>
       !strcmp(pin,"PD2")||!strcmp(pin,"PD1")||!strcmp(pin,"PD0"))
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	9c 81       	ldd	r25, Y+4	; 0x04
    119c:	68 e6       	ldi	r22, 0x68	; 104
    119e:	71 e0       	ldi	r23, 0x01	; 1
    11a0:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    if(!strcmp(pin,"PD7")||!strcmp(pin,"PD6")||!strcmp(pin,"PD5")||!strcmp(pin,"PD4")||!strcmp(pin,"PD3")||
    11a4:	89 2b       	or	r24, r25
    11a6:	81 f0       	breq	.+32     	; 0x11c8 <GPIOPinRead+0x1ea>
       !strcmp(pin,"PD2")||!strcmp(pin,"PD1")||!strcmp(pin,"PD0"))
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	9c 81       	ldd	r25, Y+4	; 0x04
    11ac:	6c e6       	ldi	r22, 0x6C	; 108
    11ae:	71 e0       	ldi	r23, 0x01	; 1
    11b0:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    11b4:	89 2b       	or	r24, r25
    11b6:	41 f0       	breq	.+16     	; 0x11c8 <GPIOPinRead+0x1ea>
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	9c 81       	ldd	r25, Y+4	; 0x04
    11bc:	60 e7       	ldi	r22, 0x70	; 112
    11be:	71 e0       	ldi	r23, 0x01	; 1
    11c0:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
    11c4:	89 2b       	or	r24, r25
    11c6:	b1 f4       	brne	.+44     	; 0x11f4 <GPIOPinRead+0x216>
    {
        if(PIND&(1<<bit))
    11c8:	89 e2       	ldi	r24, 0x29	; 41
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	fc 01       	movw	r30, r24
    11ce:	80 81       	ld	r24, Z
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	2a 81       	ldd	r18, Y+2	; 0x02
    11d6:	22 2f       	mov	r18, r18
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <GPIOPinRead+0x202>
    11dc:	95 95       	asr	r25
    11de:	87 95       	ror	r24
    11e0:	2a 95       	dec	r18
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <GPIOPinRead+0x1fe>
    11e4:	81 70       	andi	r24, 0x01	; 1
    11e6:	99 27       	eor	r25, r25
    11e8:	89 2b       	or	r24, r25
    11ea:	19 f0       	breq	.+6      	; 0x11f2 <GPIOPinRead+0x214>
        {
            state=HIGH;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	01 c0       	rjmp	.+2      	; 0x11f4 <GPIOPinRead+0x216>
        }
        else
        {
            state=LOW;
    11f2:	19 82       	std	Y+1, r1	; 0x01
        }
    }
    return state;
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <main>:

* Arguments: None
* Returns: 0
******************************************************************************/
int main()
{
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    ETC_init();
    120c:	0e 94 2f 02 	call	0x45e	; 0x45e <ETC_init>
    while(1)
    {
        Read_FLAGS();
    1210:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Read_FLAGS>
        if(FLAG.engineStatus==0)
    1214:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <FLAG+0x3>
    1218:	88 23       	and	r24, r24
    121a:	e9 f5       	brne	.+122    	; 0x1296 <main+0x92>
        {
            if(FLAG.APS1_fail==0&&FLAG.APS2_fail==1&&FLAG.TPS_fail==1)
    121c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <FLAG>
    1220:	88 23       	and	r24, r24
    1222:	59 f4       	brne	.+22     	; 0x123a <main+0x36>
    1224:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <FLAG+0x1>
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	39 f4       	brne	.+14     	; 0x123a <main+0x36>
    122c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <FLAG+0x2>
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	19 f4       	brne	.+6      	; 0x123a <main+0x36>
            {
                ETC_APS2();
    1234:	0e 94 01 03 	call	0x602	; 0x602 <ETC_APS2>
    1238:	30 c0       	rjmp	.+96     	; 0x129a <main+0x96>
            }
            else if(FLAG.APS2_fail==0&&FLAG.APS1_fail==1&&FLAG.TPS_fail==1)
    123a:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <FLAG+0x1>
    123e:	88 23       	and	r24, r24
    1240:	59 f4       	brne	.+22     	; 0x1258 <main+0x54>
    1242:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <FLAG>
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	39 f4       	brne	.+14     	; 0x1258 <main+0x54>
    124a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <FLAG+0x2>
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	19 f4       	brne	.+6      	; 0x1258 <main+0x54>
            {
                ETC_APS1();
    1252:	0e 94 90 02 	call	0x520	; 0x520 <ETC_APS1>
    1256:	21 c0       	rjmp	.+66     	; 0x129a <main+0x96>
            }
            else if(FLAG.APS1_fail==1&&FLAG.APS2_fail==1&&FLAG.TPS_fail==1)
    1258:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <FLAG>
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	59 f4       	brne	.+22     	; 0x1276 <main+0x72>
    1260:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <FLAG+0x1>
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	39 f4       	brne	.+14     	; 0x1276 <main+0x72>
    1268:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <FLAG+0x2>
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	19 f4       	brne	.+6      	; 0x1276 <main+0x72>
            {
                ETC_APS1();
    1270:	0e 94 90 02 	call	0x520	; 0x520 <ETC_APS1>
    1274:	12 c0       	rjmp	.+36     	; 0x129a <main+0x96>
            }
            else if(FLAG.TPS_fail==0||(FLAG.APS1_fail==0&&FLAG.APS2_fail==0))
    1276:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <FLAG+0x2>
    127a:	88 23       	and	r24, r24
    127c:	49 f0       	breq	.+18     	; 0x1290 <main+0x8c>
    127e:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <FLAG>
    1282:	88 23       	and	r24, r24
    1284:	29 f6       	brne	.-118    	; 0x1210 <main+0xc>
    1286:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <FLAG+0x1>
    128a:	88 23       	and	r24, r24
    128c:	09 f0       	breq	.+2      	; 0x1290 <main+0x8c>
    128e:	c0 cf       	rjmp	.-128    	; 0x1210 <main+0xc>
            {
                ETC_Limp();
    1290:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <ETC_Limp>
    1294:	bd cf       	rjmp	.-134    	; 0x1210 <main+0xc>
            }
        }
        else
        {
            ETC_off();
    1296:	0e 94 67 02 	call	0x4ce	; 0x4ce <ETC_off>
        Read_FLAGS();
    129a:	ba cf       	rjmp	.-140    	; 0x1210 <main+0xc>

0000129c <PWM_init>:

* Arguments: None
* Returns: None
******************************************************************************/
void PWM_init()
{
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    TCCR0A|=((1<<WGM01)|(1<<WGM00));
    12a4:	84 e4       	ldi	r24, 0x44	; 68
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	fc 01       	movw	r30, r24
    12aa:	20 81       	ld	r18, Z
    12ac:	84 e4       	ldi	r24, 0x44	; 68
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	23 60       	ori	r18, 0x03	; 3
    12b2:	fc 01       	movw	r30, r24
    12b4:	20 83       	st	Z, r18
    TCNT0=0x00;
    12b6:	86 e4       	ldi	r24, 0x46	; 70
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	fc 01       	movw	r30, r24
    12bc:	10 82       	st	Z, r1
    TCCR0B |= ((1 << CS00) | (1 << CS02));
    12be:	85 e4       	ldi	r24, 0x45	; 69
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	fc 01       	movw	r30, r24
    12c4:	20 81       	ld	r18, Z
    12c6:	85 e4       	ldi	r24, 0x45	; 69
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	25 60       	ori	r18, 0x05	; 5
    12cc:	fc 01       	movw	r30, r24
    12ce:	20 83       	st	Z, r18
    TCCR0B &= ~(1 << CS01);
    12d0:	85 e4       	ldi	r24, 0x45	; 69
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	fc 01       	movw	r30, r24
    12d6:	20 81       	ld	r18, Z
    12d8:	85 e4       	ldi	r24, 0x45	; 69
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	2d 7f       	andi	r18, 0xFD	; 253
    12de:	fc 01       	movw	r30, r24
    12e0:	20 83       	st	Z, r18
}
    12e2:	00 00       	nop
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	08 95       	ret

000012ea <PWM_disable>:

* Arguments: None
* Returns: None
******************************************************************************/
void PWM_disable()
{
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    TCCR0A&=~(1<<COM0A1);
    12f2:	84 e4       	ldi	r24, 0x44	; 68
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	fc 01       	movw	r30, r24
    12f8:	20 81       	ld	r18, Z
    12fa:	84 e4       	ldi	r24, 0x44	; 68
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	2f 77       	andi	r18, 0x7F	; 127
    1300:	fc 01       	movw	r30, r24
    1302:	20 83       	st	Z, r18
    TCCR0A&=~(1<<COM0A0);
    1304:	84 e4       	ldi	r24, 0x44	; 68
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	fc 01       	movw	r30, r24
    130a:	20 81       	ld	r18, Z
    130c:	84 e4       	ldi	r24, 0x44	; 68
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	2f 7b       	andi	r18, 0xBF	; 191
    1312:	fc 01       	movw	r30, r24
    1314:	20 83       	st	Z, r18
}
    1316:	00 00       	nop
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	08 95       	ret

0000131e <PWM_enable>:

* Arguments: None
* Returns: None
******************************************************************************/
void PWM_enable()
{
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    TCCR0A|=(1<<COM0A1);
    1326:	84 e4       	ldi	r24, 0x44	; 68
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	fc 01       	movw	r30, r24
    132c:	20 81       	ld	r18, Z
    132e:	84 e4       	ldi	r24, 0x44	; 68
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	20 68       	ori	r18, 0x80	; 128
    1334:	fc 01       	movw	r30, r24
    1336:	20 83       	st	Z, r18
    TCCR0A&=~(1<<COM0A0);
    1338:	84 e4       	ldi	r24, 0x44	; 68
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	fc 01       	movw	r30, r24
    133e:	20 81       	ld	r18, Z
    1340:	84 e4       	ldi	r24, 0x44	; 68
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	2f 7b       	andi	r18, 0xBF	; 191
    1346:	fc 01       	movw	r30, r24
    1348:	20 83       	st	Z, r18
}
    134a:	00 00       	nop
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	08 95       	ret

00001352 <__subsf3>:
    1352:	50 58       	subi	r21, 0x80	; 128

00001354 <__addsf3>:
    1354:	bb 27       	eor	r27, r27
    1356:	aa 27       	eor	r26, r26
    1358:	0e d0       	rcall	.+28     	; 0x1376 <__addsf3x>
    135a:	76 c1       	rjmp	.+748    	; 0x1648 <__fp_round>
    135c:	67 d1       	rcall	.+718    	; 0x162c <__fp_pscA>
    135e:	30 f0       	brcs	.+12     	; 0x136c <__addsf3+0x18>
    1360:	6c d1       	rcall	.+728    	; 0x163a <__fp_pscB>
    1362:	20 f0       	brcs	.+8      	; 0x136c <__addsf3+0x18>
    1364:	31 f4       	brne	.+12     	; 0x1372 <__addsf3+0x1e>
    1366:	9f 3f       	cpi	r25, 0xFF	; 255
    1368:	11 f4       	brne	.+4      	; 0x136e <__addsf3+0x1a>
    136a:	1e f4       	brtc	.+6      	; 0x1372 <__addsf3+0x1e>
    136c:	5c c1       	rjmp	.+696    	; 0x1626 <__fp_nan>
    136e:	0e f4       	brtc	.+2      	; 0x1372 <__addsf3+0x1e>
    1370:	e0 95       	com	r30
    1372:	e7 fb       	bst	r30, 7
    1374:	52 c1       	rjmp	.+676    	; 0x161a <__fp_inf>

00001376 <__addsf3x>:
    1376:	e9 2f       	mov	r30, r25
    1378:	78 d1       	rcall	.+752    	; 0x166a <__fp_split3>
    137a:	80 f3       	brcs	.-32     	; 0x135c <__addsf3+0x8>
    137c:	ba 17       	cp	r27, r26
    137e:	62 07       	cpc	r22, r18
    1380:	73 07       	cpc	r23, r19
    1382:	84 07       	cpc	r24, r20
    1384:	95 07       	cpc	r25, r21
    1386:	18 f0       	brcs	.+6      	; 0x138e <__addsf3x+0x18>
    1388:	99 f4       	brne	.+38     	; 0x13b0 <__addsf3x+0x3a>
    138a:	c6 f5       	brtc	.+112    	; 0x13fc <__addsf3x+0x86>
    138c:	90 c1       	rjmp	.+800    	; 0x16ae <__fp_zero>
    138e:	0e f4       	brtc	.+2      	; 0x1392 <__addsf3x+0x1c>
    1390:	e0 95       	com	r30
    1392:	0b 2e       	mov	r0, r27
    1394:	ba 2f       	mov	r27, r26
    1396:	a0 2d       	mov	r26, r0
    1398:	06 2e       	mov	r0, r22
    139a:	62 2f       	mov	r22, r18
    139c:	20 2d       	mov	r18, r0
    139e:	07 2e       	mov	r0, r23
    13a0:	73 2f       	mov	r23, r19
    13a2:	30 2d       	mov	r19, r0
    13a4:	08 2e       	mov	r0, r24
    13a6:	84 2f       	mov	r24, r20
    13a8:	40 2d       	mov	r20, r0
    13aa:	09 2e       	mov	r0, r25
    13ac:	95 2f       	mov	r25, r21
    13ae:	50 2d       	mov	r21, r0
    13b0:	ff 27       	eor	r31, r31
    13b2:	59 1b       	sub	r21, r25
    13b4:	99 f0       	breq	.+38     	; 0x13dc <__addsf3x+0x66>
    13b6:	59 3f       	cpi	r21, 0xF9	; 249
    13b8:	50 f4       	brcc	.+20     	; 0x13ce <__addsf3x+0x58>
    13ba:	50 3e       	cpi	r21, 0xE0	; 224
    13bc:	68 f1       	brcs	.+90     	; 0x1418 <__addsf3x+0xa2>
    13be:	1a 16       	cp	r1, r26
    13c0:	f0 40       	sbci	r31, 0x00	; 0
    13c2:	a2 2f       	mov	r26, r18
    13c4:	23 2f       	mov	r18, r19
    13c6:	34 2f       	mov	r19, r20
    13c8:	44 27       	eor	r20, r20
    13ca:	58 5f       	subi	r21, 0xF8	; 248
    13cc:	f3 cf       	rjmp	.-26     	; 0x13b4 <__addsf3x+0x3e>
    13ce:	46 95       	lsr	r20
    13d0:	37 95       	ror	r19
    13d2:	27 95       	ror	r18
    13d4:	a7 95       	ror	r26
    13d6:	f0 40       	sbci	r31, 0x00	; 0
    13d8:	53 95       	inc	r21
    13da:	c9 f7       	brne	.-14     	; 0x13ce <__addsf3x+0x58>
    13dc:	7e f4       	brtc	.+30     	; 0x13fc <__addsf3x+0x86>
    13de:	1f 16       	cp	r1, r31
    13e0:	ba 0b       	sbc	r27, r26
    13e2:	62 0b       	sbc	r22, r18
    13e4:	73 0b       	sbc	r23, r19
    13e6:	84 0b       	sbc	r24, r20
    13e8:	ba f0       	brmi	.+46     	; 0x1418 <__addsf3x+0xa2>
    13ea:	91 50       	subi	r25, 0x01	; 1
    13ec:	a1 f0       	breq	.+40     	; 0x1416 <__addsf3x+0xa0>
    13ee:	ff 0f       	add	r31, r31
    13f0:	bb 1f       	adc	r27, r27
    13f2:	66 1f       	adc	r22, r22
    13f4:	77 1f       	adc	r23, r23
    13f6:	88 1f       	adc	r24, r24
    13f8:	c2 f7       	brpl	.-16     	; 0x13ea <__addsf3x+0x74>
    13fa:	0e c0       	rjmp	.+28     	; 0x1418 <__addsf3x+0xa2>
    13fc:	ba 0f       	add	r27, r26
    13fe:	62 1f       	adc	r22, r18
    1400:	73 1f       	adc	r23, r19
    1402:	84 1f       	adc	r24, r20
    1404:	48 f4       	brcc	.+18     	; 0x1418 <__addsf3x+0xa2>
    1406:	87 95       	ror	r24
    1408:	77 95       	ror	r23
    140a:	67 95       	ror	r22
    140c:	b7 95       	ror	r27
    140e:	f7 95       	ror	r31
    1410:	9e 3f       	cpi	r25, 0xFE	; 254
    1412:	08 f0       	brcs	.+2      	; 0x1416 <__addsf3x+0xa0>
    1414:	ae cf       	rjmp	.-164    	; 0x1372 <__addsf3+0x1e>
    1416:	93 95       	inc	r25
    1418:	88 0f       	add	r24, r24
    141a:	08 f0       	brcs	.+2      	; 0x141e <__addsf3x+0xa8>
    141c:	99 27       	eor	r25, r25
    141e:	ee 0f       	add	r30, r30
    1420:	97 95       	ror	r25
    1422:	87 95       	ror	r24
    1424:	08 95       	ret

00001426 <__cmpsf2>:
    1426:	d5 d0       	rcall	.+426    	; 0x15d2 <__fp_cmp>
    1428:	08 f4       	brcc	.+2      	; 0x142c <__cmpsf2+0x6>
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	08 95       	ret

0000142e <__divsf3>:
    142e:	0c d0       	rcall	.+24     	; 0x1448 <__divsf3x>
    1430:	0b c1       	rjmp	.+534    	; 0x1648 <__fp_round>
    1432:	03 d1       	rcall	.+518    	; 0x163a <__fp_pscB>
    1434:	40 f0       	brcs	.+16     	; 0x1446 <__divsf3+0x18>
    1436:	fa d0       	rcall	.+500    	; 0x162c <__fp_pscA>
    1438:	30 f0       	brcs	.+12     	; 0x1446 <__divsf3+0x18>
    143a:	21 f4       	brne	.+8      	; 0x1444 <__divsf3+0x16>
    143c:	5f 3f       	cpi	r21, 0xFF	; 255
    143e:	19 f0       	breq	.+6      	; 0x1446 <__divsf3+0x18>
    1440:	ec c0       	rjmp	.+472    	; 0x161a <__fp_inf>
    1442:	51 11       	cpse	r21, r1
    1444:	35 c1       	rjmp	.+618    	; 0x16b0 <__fp_szero>
    1446:	ef c0       	rjmp	.+478    	; 0x1626 <__fp_nan>

00001448 <__divsf3x>:
    1448:	10 d1       	rcall	.+544    	; 0x166a <__fp_split3>
    144a:	98 f3       	brcs	.-26     	; 0x1432 <__divsf3+0x4>

0000144c <__divsf3_pse>:
    144c:	99 23       	and	r25, r25
    144e:	c9 f3       	breq	.-14     	; 0x1442 <__divsf3+0x14>
    1450:	55 23       	and	r21, r21
    1452:	b1 f3       	breq	.-20     	; 0x1440 <__divsf3+0x12>
    1454:	95 1b       	sub	r25, r21
    1456:	55 0b       	sbc	r21, r21
    1458:	bb 27       	eor	r27, r27
    145a:	aa 27       	eor	r26, r26
    145c:	62 17       	cp	r22, r18
    145e:	73 07       	cpc	r23, r19
    1460:	84 07       	cpc	r24, r20
    1462:	38 f0       	brcs	.+14     	; 0x1472 <__divsf3_pse+0x26>
    1464:	9f 5f       	subi	r25, 0xFF	; 255
    1466:	5f 4f       	sbci	r21, 0xFF	; 255
    1468:	22 0f       	add	r18, r18
    146a:	33 1f       	adc	r19, r19
    146c:	44 1f       	adc	r20, r20
    146e:	aa 1f       	adc	r26, r26
    1470:	a9 f3       	breq	.-22     	; 0x145c <__divsf3_pse+0x10>
    1472:	34 d0       	rcall	.+104    	; 0x14dc <__divsf3_pse+0x90>
    1474:	0e 2e       	mov	r0, r30
    1476:	3a f0       	brmi	.+14     	; 0x1486 <__divsf3_pse+0x3a>
    1478:	e0 e8       	ldi	r30, 0x80	; 128
    147a:	31 d0       	rcall	.+98     	; 0x14de <__divsf3_pse+0x92>
    147c:	91 50       	subi	r25, 0x01	; 1
    147e:	50 40       	sbci	r21, 0x00	; 0
    1480:	e6 95       	lsr	r30
    1482:	00 1c       	adc	r0, r0
    1484:	ca f7       	brpl	.-14     	; 0x1478 <__divsf3_pse+0x2c>
    1486:	2a d0       	rcall	.+84     	; 0x14dc <__divsf3_pse+0x90>
    1488:	fe 2f       	mov	r31, r30
    148a:	28 d0       	rcall	.+80     	; 0x14dc <__divsf3_pse+0x90>
    148c:	66 0f       	add	r22, r22
    148e:	77 1f       	adc	r23, r23
    1490:	88 1f       	adc	r24, r24
    1492:	bb 1f       	adc	r27, r27
    1494:	26 17       	cp	r18, r22
    1496:	37 07       	cpc	r19, r23
    1498:	48 07       	cpc	r20, r24
    149a:	ab 07       	cpc	r26, r27
    149c:	b0 e8       	ldi	r27, 0x80	; 128
    149e:	09 f0       	breq	.+2      	; 0x14a2 <__divsf3_pse+0x56>
    14a0:	bb 0b       	sbc	r27, r27
    14a2:	80 2d       	mov	r24, r0
    14a4:	6e 2f       	mov	r22, r30
    14a6:	7f 2f       	mov	r23, r31
    14a8:	ff 27       	eor	r31, r31
    14aa:	93 58       	subi	r25, 0x83	; 131
    14ac:	5f 4f       	sbci	r21, 0xFF	; 255
    14ae:	2a f0       	brmi	.+10     	; 0x14ba <__divsf3_pse+0x6e>
    14b0:	9e 3f       	cpi	r25, 0xFE	; 254
    14b2:	51 05       	cpc	r21, r1
    14b4:	68 f0       	brcs	.+26     	; 0x14d0 <__divsf3_pse+0x84>
    14b6:	b1 c0       	rjmp	.+354    	; 0x161a <__fp_inf>
    14b8:	fb c0       	rjmp	.+502    	; 0x16b0 <__fp_szero>
    14ba:	5f 3f       	cpi	r21, 0xFF	; 255
    14bc:	ec f3       	brlt	.-6      	; 0x14b8 <__divsf3_pse+0x6c>
    14be:	98 3e       	cpi	r25, 0xE8	; 232
    14c0:	dc f3       	brlt	.-10     	; 0x14b8 <__divsf3_pse+0x6c>
    14c2:	86 95       	lsr	r24
    14c4:	77 95       	ror	r23
    14c6:	67 95       	ror	r22
    14c8:	b7 95       	ror	r27
    14ca:	f7 95       	ror	r31
    14cc:	9f 5f       	subi	r25, 0xFF	; 255
    14ce:	c9 f7       	brne	.-14     	; 0x14c2 <__divsf3_pse+0x76>
    14d0:	88 0f       	add	r24, r24
    14d2:	91 1d       	adc	r25, r1
    14d4:	96 95       	lsr	r25
    14d6:	87 95       	ror	r24
    14d8:	97 f9       	bld	r25, 7
    14da:	08 95       	ret
    14dc:	e1 e0       	ldi	r30, 0x01	; 1
    14de:	66 0f       	add	r22, r22
    14e0:	77 1f       	adc	r23, r23
    14e2:	88 1f       	adc	r24, r24
    14e4:	bb 1f       	adc	r27, r27
    14e6:	62 17       	cp	r22, r18
    14e8:	73 07       	cpc	r23, r19
    14ea:	84 07       	cpc	r24, r20
    14ec:	ba 07       	cpc	r27, r26
    14ee:	20 f0       	brcs	.+8      	; 0x14f8 <__divsf3_pse+0xac>
    14f0:	62 1b       	sub	r22, r18
    14f2:	73 0b       	sbc	r23, r19
    14f4:	84 0b       	sbc	r24, r20
    14f6:	ba 0b       	sbc	r27, r26
    14f8:	ee 1f       	adc	r30, r30
    14fa:	88 f7       	brcc	.-30     	; 0x14de <__divsf3_pse+0x92>
    14fc:	e0 95       	com	r30
    14fe:	08 95       	ret

00001500 <__fixunssfsi>:
    1500:	bc d0       	rcall	.+376    	; 0x167a <__fp_splitA>
    1502:	88 f0       	brcs	.+34     	; 0x1526 <__fixunssfsi+0x26>
    1504:	9f 57       	subi	r25, 0x7F	; 127
    1506:	90 f0       	brcs	.+36     	; 0x152c <__fixunssfsi+0x2c>
    1508:	b9 2f       	mov	r27, r25
    150a:	99 27       	eor	r25, r25
    150c:	b7 51       	subi	r27, 0x17	; 23
    150e:	a0 f0       	brcs	.+40     	; 0x1538 <__fixunssfsi+0x38>
    1510:	d1 f0       	breq	.+52     	; 0x1546 <__fixunssfsi+0x46>
    1512:	66 0f       	add	r22, r22
    1514:	77 1f       	adc	r23, r23
    1516:	88 1f       	adc	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	1a f0       	brmi	.+6      	; 0x1522 <__fixunssfsi+0x22>
    151c:	ba 95       	dec	r27
    151e:	c9 f7       	brne	.-14     	; 0x1512 <__fixunssfsi+0x12>
    1520:	12 c0       	rjmp	.+36     	; 0x1546 <__fixunssfsi+0x46>
    1522:	b1 30       	cpi	r27, 0x01	; 1
    1524:	81 f0       	breq	.+32     	; 0x1546 <__fixunssfsi+0x46>
    1526:	c3 d0       	rcall	.+390    	; 0x16ae <__fp_zero>
    1528:	b1 e0       	ldi	r27, 0x01	; 1
    152a:	08 95       	ret
    152c:	c0 c0       	rjmp	.+384    	; 0x16ae <__fp_zero>
    152e:	67 2f       	mov	r22, r23
    1530:	78 2f       	mov	r23, r24
    1532:	88 27       	eor	r24, r24
    1534:	b8 5f       	subi	r27, 0xF8	; 248
    1536:	39 f0       	breq	.+14     	; 0x1546 <__fixunssfsi+0x46>
    1538:	b9 3f       	cpi	r27, 0xF9	; 249
    153a:	cc f3       	brlt	.-14     	; 0x152e <__fixunssfsi+0x2e>
    153c:	86 95       	lsr	r24
    153e:	77 95       	ror	r23
    1540:	67 95       	ror	r22
    1542:	b3 95       	inc	r27
    1544:	d9 f7       	brne	.-10     	; 0x153c <__fixunssfsi+0x3c>
    1546:	3e f4       	brtc	.+14     	; 0x1556 <__fixunssfsi+0x56>
    1548:	90 95       	com	r25
    154a:	80 95       	com	r24
    154c:	70 95       	com	r23
    154e:	61 95       	neg	r22
    1550:	7f 4f       	sbci	r23, 0xFF	; 255
    1552:	8f 4f       	sbci	r24, 0xFF	; 255
    1554:	9f 4f       	sbci	r25, 0xFF	; 255
    1556:	08 95       	ret

00001558 <__floatunsisf>:
    1558:	e8 94       	clt
    155a:	09 c0       	rjmp	.+18     	; 0x156e <__floatsisf+0x12>

0000155c <__floatsisf>:
    155c:	97 fb       	bst	r25, 7
    155e:	3e f4       	brtc	.+14     	; 0x156e <__floatsisf+0x12>
    1560:	90 95       	com	r25
    1562:	80 95       	com	r24
    1564:	70 95       	com	r23
    1566:	61 95       	neg	r22
    1568:	7f 4f       	sbci	r23, 0xFF	; 255
    156a:	8f 4f       	sbci	r24, 0xFF	; 255
    156c:	9f 4f       	sbci	r25, 0xFF	; 255
    156e:	99 23       	and	r25, r25
    1570:	a9 f0       	breq	.+42     	; 0x159c <__floatsisf+0x40>
    1572:	f9 2f       	mov	r31, r25
    1574:	96 e9       	ldi	r25, 0x96	; 150
    1576:	bb 27       	eor	r27, r27
    1578:	93 95       	inc	r25
    157a:	f6 95       	lsr	r31
    157c:	87 95       	ror	r24
    157e:	77 95       	ror	r23
    1580:	67 95       	ror	r22
    1582:	b7 95       	ror	r27
    1584:	f1 11       	cpse	r31, r1
    1586:	f8 cf       	rjmp	.-16     	; 0x1578 <__floatsisf+0x1c>
    1588:	fa f4       	brpl	.+62     	; 0x15c8 <__floatsisf+0x6c>
    158a:	bb 0f       	add	r27, r27
    158c:	11 f4       	brne	.+4      	; 0x1592 <__floatsisf+0x36>
    158e:	60 ff       	sbrs	r22, 0
    1590:	1b c0       	rjmp	.+54     	; 0x15c8 <__floatsisf+0x6c>
    1592:	6f 5f       	subi	r22, 0xFF	; 255
    1594:	7f 4f       	sbci	r23, 0xFF	; 255
    1596:	8f 4f       	sbci	r24, 0xFF	; 255
    1598:	9f 4f       	sbci	r25, 0xFF	; 255
    159a:	16 c0       	rjmp	.+44     	; 0x15c8 <__floatsisf+0x6c>
    159c:	88 23       	and	r24, r24
    159e:	11 f0       	breq	.+4      	; 0x15a4 <__floatsisf+0x48>
    15a0:	96 e9       	ldi	r25, 0x96	; 150
    15a2:	11 c0       	rjmp	.+34     	; 0x15c6 <__floatsisf+0x6a>
    15a4:	77 23       	and	r23, r23
    15a6:	21 f0       	breq	.+8      	; 0x15b0 <__floatsisf+0x54>
    15a8:	9e e8       	ldi	r25, 0x8E	; 142
    15aa:	87 2f       	mov	r24, r23
    15ac:	76 2f       	mov	r23, r22
    15ae:	05 c0       	rjmp	.+10     	; 0x15ba <__floatsisf+0x5e>
    15b0:	66 23       	and	r22, r22
    15b2:	71 f0       	breq	.+28     	; 0x15d0 <__floatsisf+0x74>
    15b4:	96 e8       	ldi	r25, 0x86	; 134
    15b6:	86 2f       	mov	r24, r22
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	2a f0       	brmi	.+10     	; 0x15c8 <__floatsisf+0x6c>
    15be:	9a 95       	dec	r25
    15c0:	66 0f       	add	r22, r22
    15c2:	77 1f       	adc	r23, r23
    15c4:	88 1f       	adc	r24, r24
    15c6:	da f7       	brpl	.-10     	; 0x15be <__floatsisf+0x62>
    15c8:	88 0f       	add	r24, r24
    15ca:	96 95       	lsr	r25
    15cc:	87 95       	ror	r24
    15ce:	97 f9       	bld	r25, 7
    15d0:	08 95       	ret

000015d2 <__fp_cmp>:
    15d2:	99 0f       	add	r25, r25
    15d4:	00 08       	sbc	r0, r0
    15d6:	55 0f       	add	r21, r21
    15d8:	aa 0b       	sbc	r26, r26
    15da:	e0 e8       	ldi	r30, 0x80	; 128
    15dc:	fe ef       	ldi	r31, 0xFE	; 254
    15de:	16 16       	cp	r1, r22
    15e0:	17 06       	cpc	r1, r23
    15e2:	e8 07       	cpc	r30, r24
    15e4:	f9 07       	cpc	r31, r25
    15e6:	c0 f0       	brcs	.+48     	; 0x1618 <__fp_cmp+0x46>
    15e8:	12 16       	cp	r1, r18
    15ea:	13 06       	cpc	r1, r19
    15ec:	e4 07       	cpc	r30, r20
    15ee:	f5 07       	cpc	r31, r21
    15f0:	98 f0       	brcs	.+38     	; 0x1618 <__fp_cmp+0x46>
    15f2:	62 1b       	sub	r22, r18
    15f4:	73 0b       	sbc	r23, r19
    15f6:	84 0b       	sbc	r24, r20
    15f8:	95 0b       	sbc	r25, r21
    15fa:	39 f4       	brne	.+14     	; 0x160a <__fp_cmp+0x38>
    15fc:	0a 26       	eor	r0, r26
    15fe:	61 f0       	breq	.+24     	; 0x1618 <__fp_cmp+0x46>
    1600:	23 2b       	or	r18, r19
    1602:	24 2b       	or	r18, r20
    1604:	25 2b       	or	r18, r21
    1606:	21 f4       	brne	.+8      	; 0x1610 <__fp_cmp+0x3e>
    1608:	08 95       	ret
    160a:	0a 26       	eor	r0, r26
    160c:	09 f4       	brne	.+2      	; 0x1610 <__fp_cmp+0x3e>
    160e:	a1 40       	sbci	r26, 0x01	; 1
    1610:	a6 95       	lsr	r26
    1612:	8f ef       	ldi	r24, 0xFF	; 255
    1614:	81 1d       	adc	r24, r1
    1616:	81 1d       	adc	r24, r1
    1618:	08 95       	ret

0000161a <__fp_inf>:
    161a:	97 f9       	bld	r25, 7
    161c:	9f 67       	ori	r25, 0x7F	; 127
    161e:	80 e8       	ldi	r24, 0x80	; 128
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	08 95       	ret

00001626 <__fp_nan>:
    1626:	9f ef       	ldi	r25, 0xFF	; 255
    1628:	80 ec       	ldi	r24, 0xC0	; 192
    162a:	08 95       	ret

0000162c <__fp_pscA>:
    162c:	00 24       	eor	r0, r0
    162e:	0a 94       	dec	r0
    1630:	16 16       	cp	r1, r22
    1632:	17 06       	cpc	r1, r23
    1634:	18 06       	cpc	r1, r24
    1636:	09 06       	cpc	r0, r25
    1638:	08 95       	ret

0000163a <__fp_pscB>:
    163a:	00 24       	eor	r0, r0
    163c:	0a 94       	dec	r0
    163e:	12 16       	cp	r1, r18
    1640:	13 06       	cpc	r1, r19
    1642:	14 06       	cpc	r1, r20
    1644:	05 06       	cpc	r0, r21
    1646:	08 95       	ret

00001648 <__fp_round>:
    1648:	09 2e       	mov	r0, r25
    164a:	03 94       	inc	r0
    164c:	00 0c       	add	r0, r0
    164e:	11 f4       	brne	.+4      	; 0x1654 <__fp_round+0xc>
    1650:	88 23       	and	r24, r24
    1652:	52 f0       	brmi	.+20     	; 0x1668 <__fp_round+0x20>
    1654:	bb 0f       	add	r27, r27
    1656:	40 f4       	brcc	.+16     	; 0x1668 <__fp_round+0x20>
    1658:	bf 2b       	or	r27, r31
    165a:	11 f4       	brne	.+4      	; 0x1660 <__fp_round+0x18>
    165c:	60 ff       	sbrs	r22, 0
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <__fp_round+0x20>
    1660:	6f 5f       	subi	r22, 0xFF	; 255
    1662:	7f 4f       	sbci	r23, 0xFF	; 255
    1664:	8f 4f       	sbci	r24, 0xFF	; 255
    1666:	9f 4f       	sbci	r25, 0xFF	; 255
    1668:	08 95       	ret

0000166a <__fp_split3>:
    166a:	57 fd       	sbrc	r21, 7
    166c:	90 58       	subi	r25, 0x80	; 128
    166e:	44 0f       	add	r20, r20
    1670:	55 1f       	adc	r21, r21
    1672:	59 f0       	breq	.+22     	; 0x168a <__fp_splitA+0x10>
    1674:	5f 3f       	cpi	r21, 0xFF	; 255
    1676:	71 f0       	breq	.+28     	; 0x1694 <__fp_splitA+0x1a>
    1678:	47 95       	ror	r20

0000167a <__fp_splitA>:
    167a:	88 0f       	add	r24, r24
    167c:	97 fb       	bst	r25, 7
    167e:	99 1f       	adc	r25, r25
    1680:	61 f0       	breq	.+24     	; 0x169a <__fp_splitA+0x20>
    1682:	9f 3f       	cpi	r25, 0xFF	; 255
    1684:	79 f0       	breq	.+30     	; 0x16a4 <__fp_splitA+0x2a>
    1686:	87 95       	ror	r24
    1688:	08 95       	ret
    168a:	12 16       	cp	r1, r18
    168c:	13 06       	cpc	r1, r19
    168e:	14 06       	cpc	r1, r20
    1690:	55 1f       	adc	r21, r21
    1692:	f2 cf       	rjmp	.-28     	; 0x1678 <__fp_split3+0xe>
    1694:	46 95       	lsr	r20
    1696:	f1 df       	rcall	.-30     	; 0x167a <__fp_splitA>
    1698:	08 c0       	rjmp	.+16     	; 0x16aa <__fp_splitA+0x30>
    169a:	16 16       	cp	r1, r22
    169c:	17 06       	cpc	r1, r23
    169e:	18 06       	cpc	r1, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	f1 cf       	rjmp	.-30     	; 0x1686 <__fp_splitA+0xc>
    16a4:	86 95       	lsr	r24
    16a6:	71 05       	cpc	r23, r1
    16a8:	61 05       	cpc	r22, r1
    16aa:	08 94       	sec
    16ac:	08 95       	ret

000016ae <__fp_zero>:
    16ae:	e8 94       	clt

000016b0 <__fp_szero>:
    16b0:	bb 27       	eor	r27, r27
    16b2:	66 27       	eor	r22, r22
    16b4:	77 27       	eor	r23, r23
    16b6:	86 2f       	mov	r24, r22
    16b8:	97 2f       	mov	r25, r23
    16ba:	97 f9       	bld	r25, 7
    16bc:	08 95       	ret

000016be <__gesf2>:
    16be:	89 df       	rcall	.-238    	; 0x15d2 <__fp_cmp>
    16c0:	08 f4       	brcc	.+2      	; 0x16c4 <__gesf2+0x6>
    16c2:	8f ef       	ldi	r24, 0xFF	; 255
    16c4:	08 95       	ret

000016c6 <__mulsf3>:
    16c6:	0a d0       	rcall	.+20     	; 0x16dc <__mulsf3x>
    16c8:	bf cf       	rjmp	.-130    	; 0x1648 <__fp_round>
    16ca:	b0 df       	rcall	.-160    	; 0x162c <__fp_pscA>
    16cc:	28 f0       	brcs	.+10     	; 0x16d8 <__mulsf3+0x12>
    16ce:	b5 df       	rcall	.-150    	; 0x163a <__fp_pscB>
    16d0:	18 f0       	brcs	.+6      	; 0x16d8 <__mulsf3+0x12>
    16d2:	95 23       	and	r25, r21
    16d4:	09 f0       	breq	.+2      	; 0x16d8 <__mulsf3+0x12>
    16d6:	a1 cf       	rjmp	.-190    	; 0x161a <__fp_inf>
    16d8:	a6 cf       	rjmp	.-180    	; 0x1626 <__fp_nan>
    16da:	ea cf       	rjmp	.-44     	; 0x16b0 <__fp_szero>

000016dc <__mulsf3x>:
    16dc:	c6 df       	rcall	.-116    	; 0x166a <__fp_split3>
    16de:	a8 f3       	brcs	.-22     	; 0x16ca <__mulsf3+0x4>

000016e0 <__mulsf3_pse>:
    16e0:	99 23       	and	r25, r25
    16e2:	d9 f3       	breq	.-10     	; 0x16da <__mulsf3+0x14>
    16e4:	55 23       	and	r21, r21
    16e6:	c9 f3       	breq	.-14     	; 0x16da <__mulsf3+0x14>
    16e8:	95 0f       	add	r25, r21
    16ea:	50 e0       	ldi	r21, 0x00	; 0
    16ec:	55 1f       	adc	r21, r21
    16ee:	aa 27       	eor	r26, r26
    16f0:	ee 27       	eor	r30, r30
    16f2:	ff 27       	eor	r31, r31
    16f4:	bb 27       	eor	r27, r27
    16f6:	00 24       	eor	r0, r0
    16f8:	08 94       	sec
    16fa:	67 95       	ror	r22
    16fc:	20 f4       	brcc	.+8      	; 0x1706 <__mulsf3_pse+0x26>
    16fe:	e2 0f       	add	r30, r18
    1700:	f3 1f       	adc	r31, r19
    1702:	b4 1f       	adc	r27, r20
    1704:	0a 1e       	adc	r0, r26
    1706:	22 0f       	add	r18, r18
    1708:	33 1f       	adc	r19, r19
    170a:	44 1f       	adc	r20, r20
    170c:	aa 1f       	adc	r26, r26
    170e:	66 95       	lsr	r22
    1710:	a9 f7       	brne	.-22     	; 0x16fc <__mulsf3_pse+0x1c>
    1712:	77 95       	ror	r23
    1714:	30 f4       	brcc	.+12     	; 0x1722 <__mulsf3_pse+0x42>
    1716:	f3 0f       	add	r31, r19
    1718:	b4 1f       	adc	r27, r20
    171a:	0a 1e       	adc	r0, r26
    171c:	12 1e       	adc	r1, r18
    171e:	08 f4       	brcc	.+2      	; 0x1722 <__mulsf3_pse+0x42>
    1720:	63 95       	inc	r22
    1722:	33 0f       	add	r19, r19
    1724:	44 1f       	adc	r20, r20
    1726:	aa 1f       	adc	r26, r26
    1728:	22 1f       	adc	r18, r18
    172a:	76 95       	lsr	r23
    172c:	99 f7       	brne	.-26     	; 0x1714 <__mulsf3_pse+0x34>
    172e:	87 95       	ror	r24
    1730:	20 f4       	brcc	.+8      	; 0x173a <__mulsf3_pse+0x5a>
    1732:	b4 0f       	add	r27, r20
    1734:	0a 1e       	adc	r0, r26
    1736:	12 1e       	adc	r1, r18
    1738:	63 1f       	adc	r22, r19
    173a:	44 0f       	add	r20, r20
    173c:	aa 1f       	adc	r26, r26
    173e:	22 1f       	adc	r18, r18
    1740:	33 1f       	adc	r19, r19
    1742:	86 95       	lsr	r24
    1744:	a9 f7       	brne	.-22     	; 0x1730 <__mulsf3_pse+0x50>
    1746:	86 2f       	mov	r24, r22
    1748:	71 2d       	mov	r23, r1
    174a:	60 2d       	mov	r22, r0
    174c:	11 24       	eor	r1, r1
    174e:	9f 57       	subi	r25, 0x7F	; 127
    1750:	50 40       	sbci	r21, 0x00	; 0
    1752:	8a f0       	brmi	.+34     	; 0x1776 <__mulsf3_pse+0x96>
    1754:	e1 f0       	breq	.+56     	; 0x178e <__mulsf3_pse+0xae>
    1756:	88 23       	and	r24, r24
    1758:	4a f0       	brmi	.+18     	; 0x176c <__mulsf3_pse+0x8c>
    175a:	ee 0f       	add	r30, r30
    175c:	ff 1f       	adc	r31, r31
    175e:	bb 1f       	adc	r27, r27
    1760:	66 1f       	adc	r22, r22
    1762:	77 1f       	adc	r23, r23
    1764:	88 1f       	adc	r24, r24
    1766:	91 50       	subi	r25, 0x01	; 1
    1768:	50 40       	sbci	r21, 0x00	; 0
    176a:	a9 f7       	brne	.-22     	; 0x1756 <__mulsf3_pse+0x76>
    176c:	9e 3f       	cpi	r25, 0xFE	; 254
    176e:	51 05       	cpc	r21, r1
    1770:	70 f0       	brcs	.+28     	; 0x178e <__mulsf3_pse+0xae>
    1772:	53 cf       	rjmp	.-346    	; 0x161a <__fp_inf>
    1774:	9d cf       	rjmp	.-198    	; 0x16b0 <__fp_szero>
    1776:	5f 3f       	cpi	r21, 0xFF	; 255
    1778:	ec f3       	brlt	.-6      	; 0x1774 <__mulsf3_pse+0x94>
    177a:	98 3e       	cpi	r25, 0xE8	; 232
    177c:	dc f3       	brlt	.-10     	; 0x1774 <__mulsf3_pse+0x94>
    177e:	86 95       	lsr	r24
    1780:	77 95       	ror	r23
    1782:	67 95       	ror	r22
    1784:	b7 95       	ror	r27
    1786:	f7 95       	ror	r31
    1788:	e7 95       	ror	r30
    178a:	9f 5f       	subi	r25, 0xFF	; 255
    178c:	c1 f7       	brne	.-16     	; 0x177e <__mulsf3_pse+0x9e>
    178e:	fe 2b       	or	r31, r30
    1790:	88 0f       	add	r24, r24
    1792:	91 1d       	adc	r25, r1
    1794:	96 95       	lsr	r25
    1796:	87 95       	ror	r24
    1798:	97 f9       	bld	r25, 7
    179a:	08 95       	ret

0000179c <strcmp>:
    179c:	e6 2f       	mov	r30, r22
    179e:	f7 2f       	mov	r31, r23
    17a0:	a8 2f       	mov	r26, r24
    17a2:	b9 2f       	mov	r27, r25
    17a4:	8d 91       	ld	r24, X+
    17a6:	01 90       	ld	r0, Z+
    17a8:	80 19       	sub	r24, r0
    17aa:	01 10       	cpse	r0, r1
    17ac:	d9 f3       	breq	.-10     	; 0x17a4 <strcmp+0x8>
    17ae:	99 0b       	sbc	r25, r25
    17b0:	08 95       	ret

000017b2 <_exit>:
    17b2:	f8 94       	cli

000017b4 <__stop_program>:
    17b4:	ff cf       	rjmp	.-2      	; 0x17b4 <__stop_program>
